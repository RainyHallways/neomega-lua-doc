import{_ as n,c as s,o as a,a as e}from"./app-DJ6fbNhj.js";const p={},t=e(`<h1 id="方块和命令块放置相关-api" tabindex="-1"><a class="header-anchor" href="#方块和命令块放置相关-api"><span>方块和命令块放置相关 API</span></a></h1><h2 id="立即方块放置" tabindex="-1"><a class="header-anchor" href="#立即方块放置"><span>立即方块放置</span></a></h2><p>以下两个 api 在被调用时会立即放置方块， 调用者应该自行确保该方块在机器人可放置范围内，且所在区块已经加载</p><ul><li><p>place_block(pos, block_name, block_data)</p><ul><li>范围：任意</li><li>说明：在 pos 位置放置一个方块</li><li>参数： <ul><li>pos: 放置的位置</li><li>block_name: 方块的名字</li><li>block_data: 方块的数据</li></ul></li><li>返回：无</li></ul><div class="language-lua line-numbers-mode" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre><code><span class="line"><span class="token comment">-- 在 1,2,3 位置放置一个状态为 0 的石头方块</span></span>
<span class="line">coromega<span class="token punctuation">:</span><span class="token function">place_block</span><span class="token punctuation">(</span><span class="token punctuation">{</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> z <span class="token operator">=</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&quot;stone&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;0&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>place_command_block(pos, block_name, block_data, option)</p><ul><li>范围：任意</li><li>说明：在 pos 位置放置一个命令方块</li><li>参数： <ul><li>pos: 放置的位置</li><li>block_name: 方块的名字</li><li>block_data: 方块的状态</li><li>option: 命令方块的配置</li></ul></li><li>返回：错误信息</li></ul><div class="language-lua line-numbers-mode" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre><code><span class="line"><span class="token comment">-- 在 884.73.829 位置放置一个重复命令方块，命令为 list @a 10tick 后执行，并且需要红石激活 条件为真 名字为：列出所有玩家 延迟为 10 tick 输出结果 并且在第一次 tick 时执行</span></span>
<span class="line"><span class="token keyword">local</span> err <span class="token operator">=</span> coromega<span class="token punctuation">:</span><span class="token function">place_command_block</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token punctuation">{</span> x <span class="token operator">=</span> <span class="token number">884</span><span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">73</span><span class="token punctuation">,</span> z <span class="token operator">=</span> <span class="token number">829</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>       <span class="token comment">-- 坐标</span></span>
<span class="line">    <span class="token string">&quot;repeating_command_block&quot;</span><span class="token punctuation">,</span>          <span class="token comment">-- command_block/chain_command_block/repeating_command_block</span></span>
<span class="line">    <span class="token number">0</span><span class="token punctuation">,</span>                                  <span class="token comment">-- 方块数据，影响朝向</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        need_red_stone <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">,</span>          <span class="token comment">-- 红石激活</span></span>
<span class="line">        conditional <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">,</span>             <span class="token comment">-- 有条件</span></span>
<span class="line">        command <span class="token operator">=</span> <span class="token string">&quot;list @a&quot;</span><span class="token punctuation">,</span>            <span class="token comment">-- 命令</span></span>
<span class="line">        name <span class="token operator">=</span> <span class="token string">&quot;列出所有玩家&quot;</span><span class="token punctuation">,</span>           <span class="token comment">-- 方块名</span></span>
<span class="line">        tick_delay <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span>                <span class="token comment">-- 延迟</span></span>
<span class="line">        track_output <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">,</span>            <span class="token comment">-- 显示输出</span></span>
<span class="line">        execute_on_first_tick <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">,</span>   <span class="token comment">-- 执行第一个对象</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">if</span> err <span class="token keyword">then</span></span>
<span class="line">    coromega<span class="token punctuation">:</span><span class="token function">print</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">end</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>place_sign(pos, block_name, text, lighting)</p><ul><li>范围：任意</li><li>说明：在 pos 位置放置一个告示牌</li><li>参数： <ul><li>pos: 放置的位置</li><li>block_name: 方块的名字</li><li>text: 告示牌上的字</li><li>lighting: 是否发光</li></ul></li><li>返回：错误信息</li></ul><div class="language-lua line-numbers-mode" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre><code><span class="line"><span class="token comment">-- 在 1,-60,0 位置放置一个告示牌，上面写着 240! 同时发光</span></span>
<span class="line"><span class="token keyword">local</span> err <span class="token operator">=</span> coromega<span class="token punctuation">:</span><span class="token function">place_sign</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token punctuation">{</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">60</span><span class="token punctuation">,</span> z <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">-- 坐标</span></span>
<span class="line">    <span class="token string">&quot;jungle_standing_sign 0&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string">&quot;§a§l240!&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token keyword">true</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">if</span> err <span class="token keyword">then</span></span>
<span class="line">    coromega<span class="token punctuation">:</span><span class="token function">print</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">end</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="区块构建-api" tabindex="-1"><a class="header-anchor" href="#区块构建-api"><span>区块构建 API</span></a></h2><blockquote><p>调用 omega builder 构建一个区块范围的方块 区块范围的方块指的是 structure 和 canvas，如何编辑和使用他们请参照章节</p></blockquote><p>建筑文件读取、转换、编辑、拷贝、画布、绘制相关相关 API</p><p>调用该 API 时，由 omega builder 负责方块正确的构建</p><p>您需要有对应的权限</p><ul><li>when_progress_increased_by_build(aread_chunk, start_pos, end_pos, target_pos, option) <ul><li>范围：任意</li><li>说明：导入 详细如下</li><li>参数： <ul><li>aread_chunk: 需要导入的数据 (structure / canvas)</li><li>start_pos: 被导入的东西的起始位置</li><li>end_pos: 被导入的东西的的结束位置</li><li>target_pos: 导入的位置 (服务器中)</li><li>option: 导入的选项</li></ul></li><li>返回值为监听器<br> 监听器的回调函数的参数为 全部任务和当前进度，当 total==current 时，导入完成</li></ul><div class="language-lua line-numbers-mode" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre><code><span class="line">coromega<span class="token punctuation">:</span><span class="token function">when_progress_increased_by_build</span><span class="token punctuation">(</span></span>
<span class="line">    target_structure_or_canvas<span class="token punctuation">,</span>                  <span class="token comment">--需要被导的东西</span></span>
<span class="line">    target_structure_or_canvas<span class="token punctuation">:</span><span class="token function">get_start_pos</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment">--被导的东西的起始位置</span></span>
<span class="line">    target_structure_or_canvas<span class="token punctuation">:</span><span class="token function">get_end_pos</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment">--被导的东西的结束位置</span></span>
<span class="line">    <span class="token punctuation">{</span> x <span class="token operator">=</span> <span class="token number">31000</span><span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">,</span> z <span class="token operator">=</span> <span class="token number">11000</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>           <span class="token comment">--导入到的位置 (租赁服中)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        speed <span class="token operator">=</span> <span class="token number">2000</span><span class="token punctuation">,</span>                            <span class="token comment">--导入速度</span></span>
<span class="line">        incremental <span class="token operator">=</span> <span class="token keyword">false</span><span class="token punctuation">,</span>                     <span class="token comment">--增量构建 (false)</span></span>
<span class="line">        force_use_block_state <span class="token operator">=</span> <span class="token keyword">false</span><span class="token punctuation">,</span>           <span class="token comment">--强制使用 block state(false),注：即时这里设置 false，如果 struceture 中 use_block_state 为 true，也会使用 block state</span></span>
<span class="line">        ignore_nbt_block <span class="token operator">=</span> <span class="token keyword">false</span><span class="token punctuation">,</span>                <span class="token comment">--是否忽略 nbt 方块 (false)</span></span>
<span class="line">        clear_target_block <span class="token operator">=</span> <span class="token keyword">false</span><span class="token punctuation">,</span>              <span class="token comment">--导入时清除目标位置的方块 (false)</span></span>
<span class="line">        clear_dropped_item <span class="token operator">=</span> <span class="token keyword">false</span><span class="token punctuation">,</span>              <span class="token comment">--导入时清理掉落物 (false)，注：清理范围为整个租赁服，不止是导入的建筑范围</span></span>
<span class="line">        auto_reverse <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">,</span>                      <span class="token comment">--（重新开始时回退跃点）(true)</span></span>
<span class="line">        start_hop<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>                             <span class="token comment">--开始跃点 (0)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token function">start_new</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>total<span class="token punctuation">,</span> current<span class="token punctuation">)</span></span>
<span class="line">    coromega<span class="token punctuation">:</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">&quot;progress: %d/%d&quot;</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token function">format</span><span class="token punctuation">(</span>total<span class="token punctuation">,</span> current<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">end</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul>`,10),l=[t];function o(c,i){return a(),s("div",null,l)}const r=n(p,[["render",o],["__file","coromega_place_command_block.html.vue"]]),k=JSON.parse('{"path":"/lua%E6%8F%92%E4%BB%B6%E7%BC%96%E5%86%99/%E6%96%B9%E5%9D%97%E5%92%8C%E5%91%BD%E4%BB%A4%E5%9D%97%E6%94%BE%E7%BD%AE%E7%9B%B8%E5%85%B3/coromega_place_command_block.html","title":"方块、命令块","lang":"zh-CN","frontmatter":{"lang":"zh-CN","title":"方块、命令块","description":"方块和命令块示例"},"headers":[{"level":2,"title":"立即方块放置","slug":"立即方块放置","link":"#立即方块放置","children":[]},{"level":2,"title":"区块构建 API","slug":"区块构建-api","link":"#区块构建-api","children":[]}],"git":{"updatedTime":1727773696000,"contributors":[{"name":"RainyHallways","email":"78735995+RainyHallways@users.noreply.github.com","commits":1}]},"filePathRelative":"lua插件编写/方块和命令块放置相关/coromega_place_command_block.md"}');export{r as comp,k as data};
