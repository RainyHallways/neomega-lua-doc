import{_ as n,c as s,o as a,a as e}from"./app-DJ6fbNhj.js";const t={},l=e(`<h2 id="方块转换和-nbt-相关-api" tabindex="-1"><a class="header-anchor" href="#方块转换和-nbt-相关-api"><span>方块转换和 nbt 相关 API</span></a></h2><div class="language-lua line-numbers-mode" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre><code><span class="line"><span class="token keyword">local</span> blocks <span class="token operator">=</span> omega<span class="token punctuation">.</span>blocks</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="将传统格式方块转换为-runtime-id-表示" tabindex="-1"><a class="header-anchor" href="#将传统格式方块转换为-runtime-id-表示"><span>将传统格式方块转换为 runtime id 表示</span></a></h3><ul><li>blocks.legacy_block_to_rtid <ul><li>将传统格式方块转换为 runtime id 表示 (注意，不应该在文件中保存 runtime id，因为 runtime id 会随版本发生变化)</li></ul><div class="language-lua line-numbers-mode" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre><code><span class="line"><span class="token keyword">local</span> rtid<span class="token punctuation">,</span> found <span class="token operator">=</span> blocks<span class="token punctuation">.</span><span class="token function">legacy_block_to_rtid</span><span class="token punctuation">(</span><span class="token string">&quot;stained_glass&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span>found<span class="token punctuation">,</span> rtid<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="将-runtime-id-表示的方块转为传统表示" tabindex="-1"><a class="header-anchor" href="#将-runtime-id-表示的方块转为传统表示"><span>将 runtime id 表示的方块转为传统表示</span></a></h3><ul><li>blocks.rtid_to_legacy_block<div class="language-lua line-numbers-mode" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre><code><span class="line"><span class="token keyword">local</span> blockName<span class="token punctuation">,</span> blockData<span class="token punctuation">,</span> found <span class="token operator">=</span> blocks<span class="token punctuation">.</span><span class="token function">rtid_to_legacy_block</span><span class="token punctuation">(</span>rtid<span class="token punctuation">)</span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span>found<span class="token punctuation">,</span> blockName<span class="token punctuation">,</span> blockData<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="将-runtime-id-表示的方块转为-block-name-block-state-表示" tabindex="-1"><a class="header-anchor" href="#将-runtime-id-表示的方块转为-block-name-block-state-表示"><span>将 runtime id 表示的方块转为 block name, block state 表示</span></a></h3><ul><li>blocks.rtid_to_block_name_and_state<div class="language-lua line-numbers-mode" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre><code><span class="line"><span class="token keyword">local</span> blockName<span class="token punctuation">,</span> blockState<span class="token punctuation">,</span> found <span class="token operator">=</span> blocks<span class="token punctuation">.</span><span class="token function">rtid_to_block_name_and_state</span><span class="token punctuation">(</span>rtid<span class="token punctuation">)</span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span>found<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">&quot;%s [%s]&quot;</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token function">format</span><span class="token punctuation">(</span>blockName<span class="token punctuation">,</span> blockState<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="将-block-name-block-state-表示转为-runtime-id-表示" tabindex="-1"><a class="header-anchor" href="#将-block-name-block-state-表示转为-runtime-id-表示"><span>将 block name, block state 表示转为 runtime id 表示</span></a></h3><ul><li>blocks.block_name_and_state_to_rtid<div class="language-lua line-numbers-mode" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre><code><span class="line"><span class="token keyword">local</span> rtid<span class="token punctuation">,</span> found <span class="token operator">=</span> blocks<span class="token punctuation">.</span><span class="token function">block_name_and_state_to_rtid</span><span class="token punctuation">(</span>blockName<span class="token punctuation">,</span> blockState<span class="token punctuation">)</span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span>found<span class="token punctuation">,</span> rtid<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="将-runtime-id-表示的方块转为-java-表示" tabindex="-1"><a class="header-anchor" href="#将-runtime-id-表示的方块转为-java-表示"><span>将 runtime id 表示的方块转为 java 表示</span></a></h3><ul><li>blocks.rtid_to_java_str<div class="language-lua line-numbers-mode" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre><code><span class="line"><span class="token keyword">local</span> java_str<span class="token punctuation">,</span> found <span class="token operator">=</span> blocks<span class="token punctuation">.</span><span class="token function">rtid_to_java_str</span><span class="token punctuation">(</span>rtid<span class="token punctuation">)</span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span>found<span class="token punctuation">,</span> java_str<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="将-java-表示转为-runtime-id-表示" tabindex="-1"><a class="header-anchor" href="#将-java-表示转为-runtime-id-表示"><span>将 java 表示转为 runtime id 表示</span></a></h3><ul><li>blocks.block_name_and_state_to_rtid<div class="language-lua line-numbers-mode" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre><code><span class="line"><span class="token keyword">local</span> rtid<span class="token punctuation">,</span> found <span class="token operator">=</span> blocks<span class="token punctuation">.</span><span class="token function">java_str_to_rtid</span><span class="token punctuation">(</span>java_str<span class="token punctuation">)</span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span>found<span class="token punctuation">,</span> rtid<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><div class="language-lua line-numbers-mode" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre><code><span class="line"><span class="token keyword">local</span> blocks <span class="token operator">=</span> omega<span class="token punctuation">.</span>blocks</span>
<span class="line"><span class="token keyword">local</span> rtid<span class="token punctuation">,</span> found <span class="token operator">=</span> blocks<span class="token punctuation">.</span><span class="token function">legacy_block_to_rtid</span><span class="token punctuation">(</span><span class="token string">&quot;stained_glass&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span>found<span class="token punctuation">,</span> rtid<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">local</span> blockName<span class="token punctuation">,</span> blockData<span class="token punctuation">,</span> found <span class="token operator">=</span> blocks<span class="token punctuation">.</span><span class="token function">rtid_to_legacy_block</span><span class="token punctuation">(</span>rtid<span class="token punctuation">)</span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span>found<span class="token punctuation">,</span> blockName<span class="token punctuation">,</span> blockData<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">local</span> blockName<span class="token punctuation">,</span> blockState<span class="token punctuation">,</span> found <span class="token operator">=</span> blocks<span class="token punctuation">.</span><span class="token function">rtid_to_block_name_and_state</span><span class="token punctuation">(</span>rtid<span class="token punctuation">)</span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span>found<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">&quot;%s [%s]&quot;</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token function">format</span><span class="token punctuation">(</span>blockName<span class="token punctuation">,</span> blockState<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">local</span> rtid<span class="token punctuation">,</span> found <span class="token operator">=</span> blocks<span class="token punctuation">.</span><span class="token function">block_name_and_state_to_rtid</span><span class="token punctuation">(</span>blockName<span class="token punctuation">,</span> blockState<span class="token punctuation">)</span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span>found<span class="token punctuation">,</span> rtid<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">local</span> java_str<span class="token punctuation">,</span> found <span class="token operator">=</span> blocks<span class="token punctuation">.</span><span class="token function">rtid_to_java_str</span><span class="token punctuation">(</span>rtid<span class="token punctuation">)</span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span>found<span class="token punctuation">,</span> java_str<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">local</span> rtid<span class="token punctuation">,</span> found <span class="token operator">=</span> blocks<span class="token punctuation">.</span><span class="token function">java_str_to_rtid</span><span class="token punctuation">(</span>java_str<span class="token punctuation">)</span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span>found<span class="token punctuation">,</span> rtid<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="nbt-编辑与生成操作" tabindex="-1"><a class="header-anchor" href="#nbt-编辑与生成操作"><span>nbt 编辑与生成操作</span></a></h2><p>local nbt = blocks.new_nbt()</p><h3 id="从方块-nbt-中读取-id" tabindex="-1"><a class="header-anchor" href="#从方块-nbt-中读取-id"><span>从方块 nbt 中读取 ID</span></a></h3><ul><li>nbt:get_id()<div class="language-lua line-numbers-mode" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre><code><span class="line"><span class="token keyword">local</span> nbt_block_id<span class="token operator">=</span>nbt<span class="token punctuation">:</span><span class="token function">get_id</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul><h3 id="从方块-nbt-中读取某个-key-的-string" tabindex="-1"><a class="header-anchor" href="#从方块-nbt-中读取某个-key-的-string"><span>从方块 nbt 中读取某个 key 的 string</span></a></h3><ul><li>nbt:get_string(key)<div class="language-lua line-numbers-mode" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre><code><span class="line"><span class="token keyword">local</span> value<span class="token operator">=</span>nbt<span class="token punctuation">:</span><span class="token function">get_string</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul><h3 id="将方块-nbt-中某个-key-的值设置为指定-string" tabindex="-1"><a class="header-anchor" href="#将方块-nbt-中某个-key-的值设置为指定-string"><span>将方块 nbt 中某个 key 的值设置为指定 string</span></a></h3><ul><li>nbt:set_string(key,value)<div class="language-lua line-numbers-mode" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre><code><span class="line"><span class="token keyword">local</span> value<span class="token operator">=</span>nbt<span class="token punctuation">:</span><span class="token function">set_string</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;#test&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul><h3 id="复制-nbt-并获得副本" tabindex="-1"><a class="header-anchor" href="#复制-nbt-并获得副本"><span>复制 nbt 并获得副本</span></a></h3><ul><li>nbt:copy()<div class="language-lua line-numbers-mode" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre><code><span class="line"><span class="token keyword">local</span> copied_nbt<span class="token operator">=</span>nbt<span class="token punctuation">:</span><span class="token function">copy</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul><h3 id="将-nbt-转为字符串表示" tabindex="-1"><a class="header-anchor" href="#将-nbt-转为字符串表示"><span>将 nbt 转为字符串表示</span></a></h3><ul><li>nbt:to_str()<div class="language-lua line-numbers-mode" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre><code><span class="line"><span class="token keyword">local</span> string_represent<span class="token operator">=</span>nbt<span class="token punctuation">:</span><span class="token function">to_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul><h3 id="将-字符串表示-的内容恢复到此-nbt" tabindex="-1"><a class="header-anchor" href="#将-字符串表示-的内容恢复到此-nbt"><span>将 字符串表示 的内容恢复到此 nbt</span></a></h3><ul><li>nbt:from_str(string_represent)<div class="language-lua line-numbers-mode" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre><code><span class="line"><span class="token keyword">local</span> nbt<span class="token operator">=</span>nbt<span class="token punctuation">:</span><span class="token function">from_str</span><span class="token punctuation">(</span>string_represent<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul><h3 id="检查-nbt-是否为空" tabindex="-1"><a class="header-anchor" href="#检查-nbt-是否为空"><span>检查 nbt 是否为空</span></a></h3><ul><li>nbt:is_empty()<div class="language-lua line-numbers-mode" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre><code><span class="line"><span class="token keyword">local</span> is_empty<span class="token operator">=</span>nbt<span class="token punctuation">:</span><span class="token function">is_empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul><h3 id="清除-nbt-内数据" tabindex="-1"><a class="header-anchor" href="#清除-nbt-内数据"><span>清除 nbt 内数据</span></a></h3><ul><li>nbt:empty()<div class="language-lua line-numbers-mode" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre><code><span class="line">nbt<span class="token punctuation">:</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul><h2 id="建筑和画布" tabindex="-1"><a class="header-anchor" href="#建筑和画布"><span>建筑和画布</span></a></h2><ul><li>建筑和画布围绕三个重要的抽象概念实现： <ul><li>AreaChunk: 由两个坐标确定的区块区域，以及一些可能的附加信息</li><li>Structure: 对应磁盘中的一个国际服存档文件</li><li>Canvas: 可以逐个放置方块的对象</li></ul></li><li>概念实现： <ul><li>structures.convert_file_to_structure(structure_path,structure_file_path) <ul><li>实现了 AreaChunk 和 Structure 概念，structure_file_path 为一个 .mcworld / .schem / .schematic /.bdx 文件</li><li>当 structure_file_path 为 .mcworld 文件时，mcworld 文件被解压到 structure_path 并返回 structure</li><li>当 structure_file_path 为 .schem / .schematic /.bdx 文件时，若 structure_path 不存在或者为空时，就地创建一个国际服存档，并将 structure_file_path 文件内容写入此存档，若 structure_path 为一个国际服存档，则将 structure_file_path 文件内容直接写入此存档，都返回 structure</li></ul><div class="language-lua line-numbers-mode" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre><code><span class="line"><span class="token keyword">local</span> structures<span class="token operator">=</span>omega<span class="token punctuation">.</span>structures</span>
<span class="line"><span class="token keyword">local</span> source_structure <span class="token operator">=</span> structures<span class="token punctuation">.</span><span class="token function">convert_file_to_structure</span><span class="token punctuation">(</span>source_structure_dir<span class="token punctuation">,</span> source_structure_file<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li><li>structures.open_or_create_structure(path) <ul><li>实现了 AreaChunk 和 Structure 概念，当 path 对应的路径不存在或者为空时，就地创建一个国际服存档，当 path 对应的路径为国际服存档时，则直接打开该存档，都返回 structure</li></ul><div class="language-lua line-numbers-mode" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre><code><span class="line"><span class="token keyword">local</span> structures<span class="token operator">=</span>omega<span class="token punctuation">.</span>structures</span>
<span class="line"><span class="token keyword">local</span> source_structure <span class="token operator">=</span> structures<span class="token punctuation">.</span><span class="token function">open_or_create_structure</span><span class="token punctuation">(</span><span class="token string">&quot;some_dir&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li><li>structures.new_canvas() <ul><li>实现了 AreaChunk 和 Canvas 概念</li><li>驻留在内存中，不会产生文件</li></ul><div class="language-lua line-numbers-mode" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre><code><span class="line"><span class="token keyword">local</span> canvas <span class="token operator">=</span> structure<span class="token punctuation">.</span><span class="token function">new_canvas</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul></li></ul><h2 id="area-chunk" tabindex="-1"><a class="header-anchor" href="#area-chunk"><span>Area Chunk</span></a></h2><h3 id="复制和移动" tabindex="-1"><a class="header-anchor" href="#复制和移动"><span>复制和移动</span></a></h3><ul><li>structures.copy(source, target, source_start_pos, source_end_pos, offset) <ul><li>将源区域内的方块复制到目标区域，如果需要移动，可以修改偏移量 (偏移量)<div class="language-lua line-numbers-mode" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre><code><span class="line"><span class="token keyword">local</span> structures<span class="token operator">=</span>omega<span class="token punctuation">.</span>structures</span>
<span class="line"><span class="token keyword">local</span> source_start_pos <span class="token operator">=</span> source_structure_or_canvas<span class="token punctuation">:</span><span class="token function">get_start_pos</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">local</span> source_end_pos <span class="token operator">=</span> source_structure_or_canvas<span class="token punctuation">:</span><span class="token function">get_end_pos</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">local</span> offset <span class="token operator">=</span> <span class="token punctuation">{</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> z <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">}</span></span>
<span class="line">structures<span class="token punctuation">.</span><span class="token function">copy</span><span class="token punctuation">(</span>source_structure_or_canvas<span class="token punctuation">,</span>target_structure_or_canvas<span class="token punctuation">,</span>source_start_pos<span class="token punctuation">,</span> source_end_pos<span class="token punctuation">,</span> offset<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul><h3 id="调用-omega-builder-构建一个区块范围的方块" tabindex="-1"><a class="header-anchor" href="#调用-omega-builder-构建一个区块范围的方块"><span>调用 omega builder 构建一个区块范围的方块</span></a></h3><p>调用该 API 时，由 omega builder 负责方块正确的构建 您需要有对应的权限</p><ul><li>when_progress_increased_by_build(aread_chunk, start_pos, end_pos, target_pos, option) <ul><li>范围：任意</li><li>说明：导入 详细如下</li><li>参数： <ul><li>aread_chunk: 需要导入的数据 (structure / canvas)</li><li>start_pos: 被导入的东西的起始位置</li><li>end_pos: 被导入的东西的的结束位置</li><li>target_pos: 导入的位置 (服务器中)</li><li>option: 导入的选项</li></ul></li><li>返回值为监听器</li><li>监听器的回调函数的参数为 全部任务和当前进度，当 total==current 时，导入完成</li></ul><div class="language-lua line-numbers-mode" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre><code><span class="line">coromega<span class="token punctuation">:</span><span class="token function">when_progress_increased_by_build</span><span class="token punctuation">(</span></span>
<span class="line">    target_structure_or_canvas<span class="token punctuation">,</span>                  <span class="token comment">--需要被导的东西</span></span>
<span class="line">    target_structure_or_canvas<span class="token punctuation">:</span><span class="token function">get_start_pos</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment">--被导的东西的起始位置</span></span>
<span class="line">    target_structure_or_canvas<span class="token punctuation">:</span><span class="token function">get_end_pos</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment">--被导的东西的结束位置</span></span>
<span class="line">    <span class="token punctuation">{</span> x <span class="token operator">=</span> <span class="token number">31000</span><span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">,</span> z <span class="token operator">=</span> <span class="token number">11000</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>           <span class="token comment">--导入到的位置 (租赁服中)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        speed <span class="token operator">=</span> <span class="token number">2000</span><span class="token punctuation">,</span>                            <span class="token comment">--导入速度</span></span>
<span class="line">        incremental <span class="token operator">=</span> <span class="token keyword">false</span><span class="token punctuation">,</span>                     <span class="token comment">--增量构建 (false)</span></span>
<span class="line">        force_use_block_state <span class="token operator">=</span> <span class="token keyword">false</span><span class="token punctuation">,</span>           <span class="token comment">--强制使用 block state(false),注：即时这里设置 false，如果 struceture 中 use_block_state 为 true，也会使用 block state</span></span>
<span class="line">        ignore_nbt_block <span class="token operator">=</span> <span class="token keyword">false</span><span class="token punctuation">,</span>                <span class="token comment">--是否忽略 nbt 方块 (false)</span></span>
<span class="line">        clear_target_block <span class="token operator">=</span> <span class="token keyword">false</span><span class="token punctuation">,</span>              <span class="token comment">--导入时清除目标位置的方块 (false)</span></span>
<span class="line">        clear_dropped_item <span class="token operator">=</span> <span class="token keyword">false</span><span class="token punctuation">,</span>              <span class="token comment">--导入时清理掉落物 (false)，注：清理范围为整个租赁服，不止是导入的建筑范围</span></span>
<span class="line">        auto_reverse <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">,</span>                      <span class="token comment">--（重新开始时回退跃点）(true)</span></span>
<span class="line">        start_hop<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>                             <span class="token comment">--开始跃点 (0)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token function">start_new</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>total<span class="token punctuation">,</span> current<span class="token punctuation">)</span></span>
<span class="line">    coromega<span class="token punctuation">:</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">&quot;progress: %d/%d&quot;</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token function">format</span><span class="token punctuation">(</span>total<span class="token punctuation">,</span> current<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">end</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="获取区域起点" tabindex="-1"><a class="header-anchor" href="#获取区域起点"><span>获取区域起点</span></a></h3><ul><li>structure/canvas:get_start_pos()<div class="language-lua line-numbers-mode" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre><code><span class="line"><span class="token keyword">local</span> start_pos <span class="token operator">=</span> structure<span class="token operator">/</span>canvas<span class="token punctuation">:</span><span class="token function">get_start_pos</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul><h3 id="设置区域起点" tabindex="-1"><a class="header-anchor" href="#设置区域起点"><span>设置区域起点</span></a></h3><ul><li>structure/canvas:set_start_pos(pos) <ul><li>如果新起点导致区域范围变大，变大的范围会被 空气 充满，如果区域变小，原有方块也不会丢失<div class="language-lua line-numbers-mode" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre><code><span class="line">structure<span class="token operator">/</span>canvas<span class="token punctuation">:</span><span class="token function">set_start_pos</span><span class="token punctuation">(</span>pos<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul></li></ul><h3 id="获取区域终点" tabindex="-1"><a class="header-anchor" href="#获取区域终点"><span>获取区域终点</span></a></h3><ul><li>structure/canvas:get_end_pos()<div class="language-lua line-numbers-mode" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre><code><span class="line"><span class="token keyword">local</span> start_pos <span class="token operator">=</span> structure<span class="token operator">/</span>canvas<span class="token punctuation">:</span><span class="token function">get_end_pos</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul><h3 id="设置区域终点" tabindex="-1"><a class="header-anchor" href="#设置区域终点"><span>设置区域终点</span></a></h3><ul><li>structure/canvas:set_end_pos(pos) <ul><li>如果新终点导致区域范围变大，变大的范围会被 空气 充满，如果区域变小，原有方块也不会丢失<div class="language-lua line-numbers-mode" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre><code><span class="line">structure<span class="token operator">/</span>canvas<span class="token punctuation">:</span><span class="token function">set_end_pos</span><span class="token punctuation">(</span>pos<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul></li></ul><h3 id="检查区域属性-是否必须使用-block-state" tabindex="-1"><a class="header-anchor" href="#检查区域属性-是否必须使用-block-state"><span>检查区域属性：是否必须使用 block state</span></a></h3><ul><li>structure/canvas:get_must_block_state()<div class="language-lua line-numbers-mode" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre><code><span class="line"><span class="token keyword">local</span> must_block_state <span class="token operator">=</span> structure<span class="token operator">/</span>canvas<span class="token punctuation">:</span><span class="token function">get_must_block_state</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul><h3 id="设置区域属性-是否必须使用-block-state" tabindex="-1"><a class="header-anchor" href="#设置区域属性-是否必须使用-block-state"><span>设置区域属性：是否必须使用 block state</span></a></h3><ul><li>structure/canvas:set_must_block_state(must_block_state)<div class="language-lua line-numbers-mode" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre><code><span class="line">structure<span class="token operator">/</span>canvas<span class="token punctuation">:</span><span class="token function">set_must_block_state</span><span class="token punctuation">(</span><span class="token keyword">true</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul><h3 id="从服务器请求一个区域的所有方块" tabindex="-1"><a class="header-anchor" href="#从服务器请求一个区域的所有方块"><span>从服务器请求一个区域的所有方块</span></a></h3><ul><li>request_structure(start_pos, region_size, move_bot) <ul><li>start_pos: 起始坐标</li><li>region_size: 区块大小</li><li>move_bot 当为 true 时，机器人会移动到目标区域附近。为 false 时，机器人不会移动，此时若目标区域未加载 (例如没有玩家在附近) 则会导致请求失败</li></ul></li></ul><p>注意，虽然函数名为 request_structure 但是实际读取出的数据是以 canvas 形式保存在内存中的 虽然背后是一个复杂的算法使之可以不受范围限制，但实际不建议这么干 更详细的方块读取操作请移步 apply_reader_to_blocks</p><div class="language-lua line-numbers-mode" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre><code><span class="line">  <span class="token keyword">local</span> start_pos <span class="token operator">=</span> <span class="token punctuation">{</span> x <span class="token operator">=</span> <span class="token number">10001</span><span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">,</span> z <span class="token operator">=</span> <span class="token number">10000</span> <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">local</span> region_size<span class="token operator">=</span> <span class="token punctuation">{</span> x <span class="token operator">=</span> <span class="token number">14</span><span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span> z <span class="token operator">=</span> <span class="token number">4</span> <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">local</span> move_bot <span class="token operator">=</span> <span class="token keyword">true</span></span>
<span class="line">  <span class="token keyword">local</span> canvas <span class="token operator">=</span> coromega<span class="token punctuation">:</span><span class="token function">request_structure</span><span class="token punctuation">(</span>start_pos<span class="token punctuation">,</span> region_size<span class="token punctuation">,</span> move_bot<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="对区域内所有方块应用读取函数" tabindex="-1"><a class="header-anchor" href="#对区域内所有方块应用读取函数"><span>对区域内所有方块应用读取函数</span></a></h3><ul><li><p>structure/canvas:apply_reader_to_blocks(start_pos, end_pos,reader_fn,option_ignore_air_block, option_ignore_nbt_block, option_ignore_normal_block)</p><ul><li>start_pos: 起始坐标</li><li>end_pos: 结束坐标</li><li>reader_fn: 读取函数</li><li>option_ignore_air_block: 是否忽略空气方块</li><li>option_ignore_nbt_block: 是否忽略 nbt 方块</li><li>option_ignore_normal_block: 是否忽略普通方块</li></ul><div class="language-lua line-numbers-mode" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre><code><span class="line">  <span class="token keyword">local</span> omega <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;omega&quot;</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token keyword">local</span> json <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;json&quot;</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token keyword">local</span> coromega <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;coromega&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>omega<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">local</span> <span class="token keyword">function</span> <span class="token function">dump_region_snbt</span><span class="token punctuation">(</span>start_pos<span class="token punctuation">,</span> region_size<span class="token punctuation">)</span></span>
<span class="line">      <span class="token keyword">local</span> move_bot <span class="token operator">=</span> <span class="token keyword">true</span></span>
<span class="line">      <span class="token keyword">local</span> canvas <span class="token operator">=</span> coromega<span class="token punctuation">:</span><span class="token function">request_structure</span><span class="token punctuation">(</span>start_pos<span class="token punctuation">,</span> region_size<span class="token punctuation">,</span> move_bot<span class="token punctuation">)</span></span>
<span class="line">      <span class="token keyword">local</span> start_pos <span class="token operator">=</span> canvas<span class="token punctuation">:</span><span class="token function">get_start_pos</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">      <span class="token comment">-- coromega:print(start_pos)</span></span>
<span class="line">      <span class="token keyword">local</span> end_pos <span class="token operator">=</span> canvas<span class="token punctuation">:</span><span class="token function">get_end_pos</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">-- 注意， end pos 的方块是包括在内的</span></span>
<span class="line">      <span class="token comment">-- coromega:print(end_pos)</span></span>
<span class="line">      <span class="token comment">-- 忽略范围内的空气方块</span></span>
<span class="line">      <span class="token keyword">local</span> option_ignore_air_block <span class="token operator">=</span> <span class="token keyword">true</span></span>
<span class="line">      <span class="token comment">-- 读取范围内的nbt方块</span></span>
<span class="line">      <span class="token keyword">local</span> option_ignore_nbt_block <span class="token operator">=</span> <span class="token keyword">false</span></span>
<span class="line">      <span class="token comment">-- 忽略范围内的非nbt方块</span></span>
<span class="line">      <span class="token keyword">local</span> option_ignore_normal_block <span class="token operator">=</span> <span class="token keyword">true</span></span>
<span class="line"></span>
<span class="line">      <span class="token comment">-- 如果只是读取一个方块的方块信息</span></span>
<span class="line">      <span class="token comment">-- local block_rtid, found = structure:block({ x = 10001, y = 101, z = 10000 })</span></span>
<span class="line"></span>
<span class="line">      <span class="token keyword">local</span> reader_fn <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">,</span> block_rtid<span class="token punctuation">,</span> nbt<span class="token punctuation">)</span></span>
<span class="line">          coromega<span class="token punctuation">:</span><span class="token function">print</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">)</span></span>
<span class="line">          <span class="token comment">-- block_rtid:</span></span>
<span class="line">          <span class="token comment">-- 方块的 runtime id 随版本变化</span></span>
<span class="line">          <span class="token comment">-- 不能用于储存，但是用来运算效率最高，红石灯在这个版本的值为 265</span></span>
<span class="line">          coromega<span class="token punctuation">:</span><span class="token function">print</span><span class="token punctuation">(</span>block_rtid<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">          <span class="token comment">-- 方块的 名 - 值 表示，是玩家最熟悉的形式，但是值的含义是模糊的</span></span>
<span class="line">          <span class="token comment">-- 而且，mc 正在逐步弃用这种表示，许多新方块也不再支持这种表示</span></span>
<span class="line">          <span class="token comment">-- 所以也不推荐，此版本中 红石灯的表示为 redstone_lamp 0</span></span>
<span class="line">          <span class="token keyword">local</span> block_name<span class="token punctuation">,</span> block_value <span class="token operator">=</span> omega<span class="token punctuation">.</span>blocks<span class="token punctuation">.</span><span class="token function">rtid_to_legacy_block</span><span class="token punctuation">(</span>block_rtid<span class="token punctuation">)</span></span>
<span class="line">          coromega<span class="token punctuation">:</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">&quot;方块名=%s 方块值=%s&quot;</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token function">format</span><span class="token punctuation">(</span>block_name<span class="token punctuation">,</span> block_value<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">          <span class="token comment">-- -- 方块的 名 - 状态值 表示，最适合存储的模式，但是相对用起来最困难</span></span>
<span class="line">          <span class="token comment">-- -- 但是，我们仍建议使用此种方式，因为这种方式兼容性最好，同时对方块的描述最准确</span></span>
<span class="line">          <span class="token comment">-- -- 虽然 lua 现在对 block state 的支持不如 go 那么完善，但是后续会逐步改善这个问题</span></span>
<span class="line">          <span class="token keyword">local</span> block_name<span class="token punctuation">,</span> block_state <span class="token operator">=</span> omega<span class="token punctuation">.</span>blocks<span class="token punctuation">.</span><span class="token function">rtid_to_block_name_and_state</span><span class="token punctuation">(</span>block_rtid<span class="token punctuation">)</span></span>
<span class="line">          coromega<span class="token punctuation">:</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">&quot;方块名=%s 方块属性=%s&quot;</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token function">format</span><span class="token punctuation">(</span>block_name<span class="token punctuation">,</span> block_state<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">          <span class="token comment">-- -- nbt 相比 lua 的 table 具有更细致的类型信息，因此它不是一个 table</span></span>
<span class="line">          <span class="token comment">-- -- 但是我们可以使用 snbt 表示这个 nbt</span></span>
<span class="line">          <span class="token keyword">local</span> snbt <span class="token operator">=</span> nbt<span class="token punctuation">:</span><span class="token function">to_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">-- snbt 表示</span></span>
<span class="line">          coromega<span class="token punctuation">:</span><span class="token function">print</span><span class="token punctuation">(</span>snbt<span class="token punctuation">)</span></span>
<span class="line">          <span class="token comment">-- -- 我们也可以转换为 lua table，但是注意，转换会导致类型信息丢失</span></span>
<span class="line">          coromega<span class="token punctuation">:</span><span class="token function">print</span><span class="token punctuation">(</span>json<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>nbt<span class="token punctuation">:</span><span class="token function">to_table</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">      <span class="token keyword">end</span></span>
<span class="line"></span>
<span class="line">      canvas<span class="token punctuation">:</span><span class="token function">apply_reader_to_blocks</span><span class="token punctuation">(</span></span>
<span class="line">          start_pos<span class="token punctuation">,</span> end_pos<span class="token punctuation">,</span>                                                          <span class="token comment">-- 范围</span></span>
<span class="line">          reader_fn<span class="token punctuation">,</span>                                                                   <span class="token comment">-- 读取函数</span></span>
<span class="line">          option_ignore_air_block<span class="token punctuation">,</span> option_ignore_nbt_block<span class="token punctuation">,</span> option_ignore_normal_block <span class="token comment">-- 选项</span></span>
<span class="line">      <span class="token punctuation">)</span></span>
<span class="line">  <span class="token keyword">end</span></span>
<span class="line"></span>
<span class="line">  coromega<span class="token punctuation">:</span><span class="token function">start_new</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">      coromega<span class="token punctuation">:</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line">      <span class="token function">dump_region_snbt</span><span class="token punctuation">(</span><span class="token punctuation">{</span> x <span class="token operator">=</span> <span class="token number">10001</span><span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">,</span> z <span class="token operator">=</span> <span class="token number">10000</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> x <span class="token operator">=</span> <span class="token number">14</span><span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span> z <span class="token operator">=</span> <span class="token number">4</span> <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token keyword">end</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">  coromega<span class="token punctuation">:</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="对区域内所有方块应用变换" tabindex="-1"><a class="header-anchor" href="#对区域内所有方块应用变换"><span>对区域内所有方块应用变换</span></a></h3><ul><li>structure/canvas:apply_alter_to_blocks(start_pos, end_pos,alter_fn,option_ignore_air_block, option_ignore_nbt_block, option_ignore_normal_block) <ul><li>start_pos: 起始坐标</li><li>end_pos: 结束坐标</li><li>alter_fn: 变换函数</li><li>option_ignore_air_block: 是否忽略空气方块</li><li>option_ignore_nbt_block: 是否忽略 nbt 方块</li><li>option_ignore_normal_block: 是否忽略普通方块</li></ul><div class="language-lua line-numbers-mode" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre><code><span class="line">  <span class="token keyword">local</span> alter_start_pos <span class="token operator">=</span> source_structure<span class="token punctuation">:</span><span class="token function">get_start_pos</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token keyword">local</span> alter_end_pos <span class="token operator">=</span> source_structure<span class="token punctuation">:</span><span class="token function">get_end_pos</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token comment">-- 忽略范围内的空气方块</span></span>
<span class="line">  <span class="token keyword">local</span> option_ignore_air_block <span class="token operator">=</span> <span class="token keyword">true</span></span>
<span class="line">  <span class="token comment">-- 修改范围内的 nbt 方块</span></span>
<span class="line">  <span class="token keyword">local</span> option_ignore_nbt_block <span class="token operator">=</span> <span class="token keyword">false</span></span>
<span class="line">  <span class="token comment">-- 忽略范围内的非 nbt 方块</span></span>
<span class="line">  <span class="token keyword">local</span> option_ignore_normal_block <span class="token operator">=</span> <span class="token keyword">true</span></span>
<span class="line">  <span class="token comment">-- 对于每一个方块，都会调用 alter_fn 函数，该函数返回修改后的方块的 runtime id 和 nbt</span></span>
<span class="line">  <span class="token keyword">local</span> alter_fn <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">,</span> block_rtid<span class="token punctuation">,</span> nbt<span class="token punctuation">)</span></span>
<span class="line">      <span class="token keyword">local</span> nbt_type <span class="token operator">=</span> nbt<span class="token punctuation">:</span><span class="token function">get_id</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">      <span class="token comment">-- 只需修改命令块的命令</span></span>
<span class="line">      <span class="token keyword">if</span> nbt_type <span class="token operator">==</span> <span class="token string">&quot;CommandBlock&quot;</span> <span class="token keyword">then</span></span>
<span class="line">          <span class="token keyword">local</span> key_name <span class="token operator">=</span> nbt<span class="token punctuation">:</span><span class="token function">get_string</span><span class="token punctuation">(</span><span class="token string">&quot;Command&quot;</span><span class="token punctuation">)</span></span>
<span class="line">          <span class="token comment">-- 将命令块的命令前加一个&quot;#&quot;,这样命令块就不会执行命令了，你也可以做其他修改</span></span>
<span class="line">          nbt<span class="token punctuation">:</span><span class="token function">set_string</span><span class="token punctuation">(</span><span class="token string">&quot;Command&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;#&quot;</span> <span class="token operator">..</span> key_name<span class="token punctuation">)</span></span>
<span class="line">      <span class="token keyword">end</span></span>
<span class="line">      <span class="token keyword">return</span> block_rtid<span class="token punctuation">,</span> nbt</span>
<span class="line">  <span class="token keyword">end</span></span>
<span class="line">  <span class="token comment">--  对目标建筑进行修改</span></span>
<span class="line">  <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;开始修改目标建筑，请稍等...\\n&quot;</span><span class="token punctuation">)</span></span>
<span class="line">  target_structure<span class="token punctuation">:</span><span class="token function">apply_alter_to_blocks</span><span class="token punctuation">(</span></span>
<span class="line">      alter_start_pos<span class="token punctuation">,</span> alter_end_pos<span class="token punctuation">,</span>                                              <span class="token comment">-- 范围</span></span>
<span class="line">      alter_fn<span class="token punctuation">,</span>                                                                    <span class="token comment">-- 修改函数</span></span>
<span class="line">      option_ignore_air_block<span class="token punctuation">,</span> option_ignore_nbt_block<span class="token punctuation">,</span> option_ignore_normal_block <span class="token comment">-- 选项</span></span>
<span class="line">  <span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="structure" tabindex="-1"><a class="header-anchor" href="#structure"><span>Structure</span></a></h2><h3 id="获得-omega-builder-可接受的存档名" tabindex="-1"><a class="header-anchor" href="#获得-omega-builder-可接受的存档名"><span>获得 omega_builder 可接受的存档名</span></a></h3><ul><li>get_file_name() <ul><li>获得 omega_builder 可接受的存档名</li></ul><div class="language-lua line-numbers-mode" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre><code><span class="line"><span class="token keyword">local</span> file_name<span class="token operator">=</span>structure<span class="token punctuation">:</span><span class="token function">get_file_name</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul><h3 id="获得建筑名" tabindex="-1"><a class="header-anchor" href="#获得建筑名"><span>获得建筑名</span></a></h3><ul><li>get_structure_name() <ul><li>获得建筑名</li></ul><div class="language-lua line-numbers-mode" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre><code><span class="line"><span class="token keyword">local</span> structure_name<span class="token operator">=</span>structure<span class="token punctuation">:</span><span class="token function">get_structure_name</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul><h3 id="设置建筑名" tabindex="-1"><a class="header-anchor" href="#设置建筑名"><span>设置建筑名</span></a></h3><ul><li>set_structure_name(name) <ul><li>设置建筑名</li></ul><div class="language-lua line-numbers-mode" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre><code><span class="line">structure<span class="token punctuation">:</span><span class="token function">set_structure_name</span><span class="token punctuation">(</span><span class="token string">&quot;test_structure&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul><h3 id="移除磁盘中的存档文件并销毁建筑" tabindex="-1"><a class="header-anchor" href="#移除磁盘中的存档文件并销毁建筑"><span>移除磁盘中的存档文件并销毁建筑</span></a></h3><ul><li>remove() <ul><li>移除磁盘中的存档文件并销毁建筑，此函数后，该建筑无法被操作</li></ul><div class="language-lua line-numbers-mode" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre><code><span class="line">structure<span class="token punctuation">:</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul><h3 id="关闭建筑-并在指定路径生成-mcworld-存档" tabindex="-1"><a class="header-anchor" href="#关闭建筑-并在指定路径生成-mcworld-存档"><span>关闭建筑，并在指定路径生成 .mcworld 存档</span></a></h3><ul><li>gen_mcworld(path) <ul><li>关闭建筑，并在指定路径生成 .mcworld 存档，此函数后，该建筑无法被操作，直到重新打开 (structures.open_or_create_structure(path))</li></ul><div class="language-lua line-numbers-mode" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre><code><span class="line"><span class="token comment">-- 获得输出目录，输出目录为当前目录 (.), 这是指程序运行的目录，不是本文件所在的目录</span></span>
<span class="line"><span class="token keyword">local</span> output_dir <span class="token operator">=</span> <span class="token string">&quot;.&quot;</span></span>
<span class="line"><span class="token comment">-- 自动计算建议的输出文件名</span></span>
<span class="line"><span class="token keyword">local</span> output_file_name <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">&quot;%s/%s.mcworld&quot;</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token function">format</span><span class="token punctuation">(</span>output_dir<span class="token punctuation">,</span> target_structure<span class="token punctuation">:</span><span class="token function">get_file_name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">-- 将目标建筑写入到输出文件 (mcworld 格式)</span></span>
<span class="line">target_structure<span class="token punctuation">:</span><span class="token function">gen_mcworld</span><span class="token punctuation">(</span>output_file_name<span class="token punctuation">)</span> <span class="token comment">-- 需要注意，调用这个函数后，建筑就无法再修改/导入/进行其他操作了，因为生成 mcworld 需要先关闭建筑</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="关闭建筑" tabindex="-1"><a class="header-anchor" href="#关闭建筑"><span>关闭建筑</span></a></h3><ul><li>close() <ul><li>关闭建筑，此函数后，该建筑无法被操作，直到重新打开 (structures.open_or_create_structure(path))</li></ul><div class="language-lua line-numbers-mode" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre><code><span class="line">target_structure<span class="token punctuation">:</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul><h2 id="canvas" tabindex="-1"><a class="header-anchor" href="#canvas"><span>Canvas</span></a></h2><h3 id="在-canvas-的-pos-位置放置一个方块" tabindex="-1"><a class="header-anchor" href="#在-canvas-的-pos-位置放置一个方块"><span>在 canvas 的 pos 位置放置一个方块</span></a></h3><ul><li>place_block(pos, block_name, block_data) <ul><li>范围：任意</li><li>说明：在 canvas 的 pos 位置放置一个方块</li><li>参数： <ul><li>pos: 放置的位置</li><li>block_name: 方块的名字</li><li>block_data: 方块的数据</li></ul></li><li>返回：无</li></ul><div class="language-lua line-numbers-mode" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre><code><span class="line"><span class="token comment">-- 在 1,2,3 位置放置一个状态为 0 的石头方块</span></span>
<span class="line">canvas<span class="token punctuation">:</span><span class="token function">place_block</span><span class="token punctuation">(</span><span class="token punctuation">{</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> z <span class="token operator">=</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&quot;stone&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;0&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="在-canvas-的-pos-位置放置一个命令方块" tabindex="-1"><a class="header-anchor" href="#在-canvas-的-pos-位置放置一个命令方块"><span>在 canvas 的 pos 位置放置一个命令方块</span></a></h3><ul><li>place_command_block(pos, block_name, block_data, option) <ul><li>范围：任意</li><li>说明：在 canvas 的 pos 位置放置一个命令方块</li><li>参数： <ul><li>pos: 放置的位置</li><li>block_name: 方块的名字</li><li>block_data: 方块的状态</li><li>option: 命令方块的配置</li></ul></li><li>返回：无</li></ul><div class="language-lua line-numbers-mode" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre><code><span class="line"><span class="token comment">-- 在 884.73.829 位置放置一个重复命令方块，命令为 list @a 10tick 后执行，并且需要红石激活 条件为真 名字为：列出所有玩家 延迟为 10 tick 输出结果 并且在第一次 tick 时执行</span></span>
<span class="line">canvas<span class="token punctuation">:</span><span class="token function">place_command_block</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token punctuation">{</span> x <span class="token operator">=</span> <span class="token number">884</span><span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">73</span><span class="token punctuation">,</span> z <span class="token operator">=</span> <span class="token number">829</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>       <span class="token comment">-- 坐标</span></span>
<span class="line">    <span class="token string">&quot;repeating_command_block&quot;</span><span class="token punctuation">,</span>          <span class="token comment">-- command_block/chain_command_block/repeating_command_block</span></span>
<span class="line">    <span class="token number">0</span><span class="token punctuation">,</span>                                  <span class="token comment">-- 方块数据，影响朝向</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        need_red_stone <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">,</span>          <span class="token comment">-- 红石激活</span></span>
<span class="line">        conditional <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">,</span>             <span class="token comment">-- 有条件</span></span>
<span class="line">        command <span class="token operator">=</span> <span class="token string">&quot;list @a&quot;</span><span class="token punctuation">,</span>            <span class="token comment">-- 命令</span></span>
<span class="line">        name <span class="token operator">=</span> <span class="token string">&quot;列出所有玩家&quot;</span><span class="token punctuation">,</span>           <span class="token comment">-- 方块名</span></span>
<span class="line">        tick_delay <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span>                <span class="token comment">-- 延迟</span></span>
<span class="line">        track_output <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">,</span>            <span class="token comment">-- 显示输出</span></span>
<span class="line">        execute_on_first_tick <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">,</span>   <span class="token comment">-- 执行第一个对象</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="设置-canvas-放置方块操作的坐标偏移" tabindex="-1"><a class="header-anchor" href="#设置-canvas-放置方块操作的坐标偏移"><span>设置 canvas 放置方块操作的坐标偏移</span></a></h3><ul><li>set_upcoming_block_offset(offset) - 后续所有 place_block / place_command_block 的操作，或间接调用 place_block / place_command_block 的操作 中的 pos 都会加上 offset 指定的偏移<div class="language-lua line-numbers-mode" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre><code><span class="line">canvas<span class="token punctuation">:</span><span class="token function">set_upcoming_block_offset</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul><h2 id="canvas-artists" tabindex="-1"><a class="header-anchor" href="#canvas-artists"><span>Canvas Artists</span></a></h2><p>local canvas_artists = omega.canvas_artists</p><h3 id="在-canvas-上绘制地图画" tabindex="-1"><a class="header-anchor" href="#在-canvas-上绘制地图画"><span>在 canvas 上绘制地图画</span></a></h3><ul><li>canvas_artists.map_art(canvas, image_file, apply_dither, xsize, zsize) <ul><li>在 canvas 上绘制地图画</li><li>image_file 为图片路径，图片可以是 jpg, jpeg, png</li><li>apply_dither: 是否应用量化算法，在地图画较大时，效果更好，较小时，效果更差</li><li>xsize: 横向地图画数量</li><li>zsize: 纵向地图画数量</li></ul><div class="language-lua line-numbers-mode" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre><code><span class="line"><span class="token keyword">local</span> canvas_artists <span class="token operator">=</span> omega<span class="token punctuation">.</span>canvas_artists</span>
<span class="line">canvas_artists<span class="token punctuation">.</span><span class="token function">map_art</span><span class="token punctuation">(</span>canvas<span class="token punctuation">,</span> <span class="token string">&quot;test.jpg&quot;</span><span class="token punctuation">,</span> <span class="token keyword">true</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul>`,85),p=[l];function c(o,i){return a(),s("div",null,p)}const r=n(t,[["render",c],["__file","导入器_strucure_canvas相关API.html.vue"]]),d=JSON.parse('{"path":"/lua%E6%8F%92%E4%BB%B6%E7%BC%96%E5%86%99/%E5%AF%BC%E5%85%A5%E5%99%A8_strucure_canvas%E7%9B%B8%E5%85%B3API/%E5%AF%BC%E5%85%A5%E5%99%A8_strucure_canvas%E7%9B%B8%E5%85%B3API.html","title":"方块转换和 nbt","lang":"zh-CN","frontmatter":{"lang":"zh-CN","title":"方块转换和 nbt","description":"方块转换和 nbt 示例"},"headers":[{"level":2,"title":"方块转换和 nbt 相关 API","slug":"方块转换和-nbt-相关-api","link":"#方块转换和-nbt-相关-api","children":[{"level":3,"title":"将传统格式方块转换为 runtime id 表示","slug":"将传统格式方块转换为-runtime-id-表示","link":"#将传统格式方块转换为-runtime-id-表示","children":[]},{"level":3,"title":"将 runtime id 表示的方块转为传统表示","slug":"将-runtime-id-表示的方块转为传统表示","link":"#将-runtime-id-表示的方块转为传统表示","children":[]},{"level":3,"title":"将 runtime id 表示的方块转为 block name, block state 表示","slug":"将-runtime-id-表示的方块转为-block-name-block-state-表示","link":"#将-runtime-id-表示的方块转为-block-name-block-state-表示","children":[]},{"level":3,"title":"将 block name, block state 表示转为 runtime id 表示","slug":"将-block-name-block-state-表示转为-runtime-id-表示","link":"#将-block-name-block-state-表示转为-runtime-id-表示","children":[]},{"level":3,"title":"将 runtime id 表示的方块转为 java 表示","slug":"将-runtime-id-表示的方块转为-java-表示","link":"#将-runtime-id-表示的方块转为-java-表示","children":[]},{"level":3,"title":"将 java 表示转为 runtime id 表示","slug":"将-java-表示转为-runtime-id-表示","link":"#将-java-表示转为-runtime-id-表示","children":[]}]},{"level":2,"title":"nbt 编辑与生成操作","slug":"nbt-编辑与生成操作","link":"#nbt-编辑与生成操作","children":[{"level":3,"title":"从方块 nbt 中读取 ID","slug":"从方块-nbt-中读取-id","link":"#从方块-nbt-中读取-id","children":[]},{"level":3,"title":"从方块 nbt 中读取某个 key 的 string","slug":"从方块-nbt-中读取某个-key-的-string","link":"#从方块-nbt-中读取某个-key-的-string","children":[]},{"level":3,"title":"将方块 nbt 中某个 key 的值设置为指定 string","slug":"将方块-nbt-中某个-key-的值设置为指定-string","link":"#将方块-nbt-中某个-key-的值设置为指定-string","children":[]},{"level":3,"title":"复制 nbt 并获得副本","slug":"复制-nbt-并获得副本","link":"#复制-nbt-并获得副本","children":[]},{"level":3,"title":"将 nbt 转为字符串表示","slug":"将-nbt-转为字符串表示","link":"#将-nbt-转为字符串表示","children":[]},{"level":3,"title":"将 字符串表示 的内容恢复到此 nbt","slug":"将-字符串表示-的内容恢复到此-nbt","link":"#将-字符串表示-的内容恢复到此-nbt","children":[]},{"level":3,"title":"检查 nbt 是否为空","slug":"检查-nbt-是否为空","link":"#检查-nbt-是否为空","children":[]},{"level":3,"title":"清除 nbt 内数据","slug":"清除-nbt-内数据","link":"#清除-nbt-内数据","children":[]}]},{"level":2,"title":"建筑和画布","slug":"建筑和画布","link":"#建筑和画布","children":[]},{"level":2,"title":"Area Chunk","slug":"area-chunk","link":"#area-chunk","children":[{"level":3,"title":"复制和移动","slug":"复制和移动","link":"#复制和移动","children":[]},{"level":3,"title":"调用 omega builder 构建一个区块范围的方块","slug":"调用-omega-builder-构建一个区块范围的方块","link":"#调用-omega-builder-构建一个区块范围的方块","children":[]},{"level":3,"title":"获取区域起点","slug":"获取区域起点","link":"#获取区域起点","children":[]},{"level":3,"title":"设置区域起点","slug":"设置区域起点","link":"#设置区域起点","children":[]},{"level":3,"title":"获取区域终点","slug":"获取区域终点","link":"#获取区域终点","children":[]},{"level":3,"title":"设置区域终点","slug":"设置区域终点","link":"#设置区域终点","children":[]},{"level":3,"title":"检查区域属性：是否必须使用 block state","slug":"检查区域属性-是否必须使用-block-state","link":"#检查区域属性-是否必须使用-block-state","children":[]},{"level":3,"title":"设置区域属性：是否必须使用 block state","slug":"设置区域属性-是否必须使用-block-state","link":"#设置区域属性-是否必须使用-block-state","children":[]},{"level":3,"title":"从服务器请求一个区域的所有方块","slug":"从服务器请求一个区域的所有方块","link":"#从服务器请求一个区域的所有方块","children":[]},{"level":3,"title":"对区域内所有方块应用读取函数","slug":"对区域内所有方块应用读取函数","link":"#对区域内所有方块应用读取函数","children":[]},{"level":3,"title":"对区域内所有方块应用变换","slug":"对区域内所有方块应用变换","link":"#对区域内所有方块应用变换","children":[]}]},{"level":2,"title":"Structure","slug":"structure","link":"#structure","children":[{"level":3,"title":"获得 omega_builder 可接受的存档名","slug":"获得-omega-builder-可接受的存档名","link":"#获得-omega-builder-可接受的存档名","children":[]},{"level":3,"title":"获得建筑名","slug":"获得建筑名","link":"#获得建筑名","children":[]},{"level":3,"title":"设置建筑名","slug":"设置建筑名","link":"#设置建筑名","children":[]},{"level":3,"title":"移除磁盘中的存档文件并销毁建筑","slug":"移除磁盘中的存档文件并销毁建筑","link":"#移除磁盘中的存档文件并销毁建筑","children":[]},{"level":3,"title":"关闭建筑，并在指定路径生成 .mcworld 存档","slug":"关闭建筑-并在指定路径生成-mcworld-存档","link":"#关闭建筑-并在指定路径生成-mcworld-存档","children":[]},{"level":3,"title":"关闭建筑","slug":"关闭建筑","link":"#关闭建筑","children":[]}]},{"level":2,"title":"Canvas","slug":"canvas","link":"#canvas","children":[{"level":3,"title":"在 canvas 的 pos 位置放置一个方块","slug":"在-canvas-的-pos-位置放置一个方块","link":"#在-canvas-的-pos-位置放置一个方块","children":[]},{"level":3,"title":"在 canvas 的 pos 位置放置一个命令方块","slug":"在-canvas-的-pos-位置放置一个命令方块","link":"#在-canvas-的-pos-位置放置一个命令方块","children":[]},{"level":3,"title":"设置 canvas 放置方块操作的坐标偏移","slug":"设置-canvas-放置方块操作的坐标偏移","link":"#设置-canvas-放置方块操作的坐标偏移","children":[]}]},{"level":2,"title":"Canvas Artists","slug":"canvas-artists","link":"#canvas-artists","children":[{"level":3,"title":"在 canvas 上绘制地图画","slug":"在-canvas-上绘制地图画","link":"#在-canvas-上绘制地图画","children":[]}]}],"git":{"updatedTime":1727773696000,"contributors":[{"name":"RainyHallways","email":"78735995+RainyHallways@users.noreply.github.com","commits":1}]},"filePathRelative":"lua插件编写/导入器_strucure_canvas相关API/导入器_strucure_canvas相关API.md"}');export{r as comp,d as data};
