import{_ as n,c as s,o as a,a as e}from"./app-DJ6fbNhj.js";const t={},p=e(`<h1 id="存储相关-api-storage-path-storage" tabindex="-1"><a class="header-anchor" href="#存储相关-api-storage-path-storage"><span>存储相关 api(storage_path &amp; storage)</span></a></h1><h2 id="获取-config-文件-插件-路径" tabindex="-1"><a class="header-anchor" href="#获取-config-文件-插件-路径"><span>获取 config 文件 (插件) 路径</span></a></h2><ul><li>config_path_of(...) <ul><li>范围：任意</li><li>说明：获取 config 文件 (插件) 路径</li><li>参数：任意数量的 config 后需要添加的路径 <blockquote><p>参数可以是想要加上的子目录或者文件名 参数会直接加再代码文件路径后面</p></blockquote></li><li>返回值：返回 config + 参数的文件存储路径</li></ul></li></ul><div class="language-lua line-numbers-mode" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre><code><span class="line">coromega<span class="token punctuation">:</span><span class="token function">config_path_of</span><span class="token punctuation">(</span><span class="token string">&quot;test&quot;</span><span class="token punctuation">)</span> <span class="token comment">-- \${neomega_storage}/config/test</span></span>
<span class="line">coromega<span class="token punctuation">:</span><span class="token function">config_path_of</span><span class="token punctuation">(</span><span class="token string">&quot;插件&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;配置.json&quot;</span><span class="token punctuation">)</span> <span class="token comment">-- \${neomega_storage}/config/插件/配置.json</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="获取代码文件-插件-路径" tabindex="-1"><a class="header-anchor" href="#获取代码文件-插件-路径"><span>获取代码文件 (插件) 路径</span></a></h2><ul><li>code_path_of(...) <ul><li>范围：任意</li><li>说明：获取代码文件 (插件) 路径</li><li>参数：任意数量 code 后需要添加的路径 <blockquote><p>参数可以是想要加上的子目录或者文件名 参数会直接加再代码文件路径后面</p></blockquote></li><li>返回值：返回代码文件路径加上参数路径后的新路径字符串</li></ul></li></ul><div class="language-lua line-numbers-mode" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre><code><span class="line">coromega<span class="token punctuation">:</span><span class="token function">code_path_of</span><span class="token punctuation">(</span><span class="token string">&quot;LuaLoader&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;test&quot;</span><span class="token punctuation">)</span> <span class="token comment">-- {$storage$}/lang/LuaLoader/test</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="获取-data-文件路径" tabindex="-1"><a class="header-anchor" href="#获取-data-文件路径"><span>获取 data 文件路径</span></a></h2><ul><li>data_path_of(...) <ul><li>范围：任意</li><li>说明：获取 data 文件路径</li><li>参数：任意数量 data 后需要添加的路径 <blockquote><p>参数可以是想要加上的相对子目录或者文件路径 参数会直接加再代码文件路径后面</p></blockquote></li><li>返回值：返回 data+ 参数的文件存储路径</li></ul></li></ul><div class="language-lua line-numbers-mode" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre><code><span class="line">  coromega<span class="token punctuation">:</span><span class="token function">data_path_of</span><span class="token punctuation">(</span><span class="token string">&quot;test&quot;</span><span class="token punctuation">)</span> <span class="token comment">-- {$storage$}/data/test</span></span>
<span class="line">  coromega<span class="token punctuation">:</span><span class="token function">data_path_of</span><span class="token punctuation">(</span><span class="token string">&quot;小说文件夹&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;雪国冒险奇谭.txt&quot;</span><span class="token punctuation">)</span> <span class="token comment">-- {$storage$}/data/小说文件夹/雪国冒险奇谭.txt</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="获取-cache-加上参数后的路径" tabindex="-1"><a class="header-anchor" href="#获取-cache-加上参数后的路径"><span>获取 cache 加上参数后的路径</span></a></h2><ul><li>cache_path_of(...) <ul><li>范围：任意</li><li>说明：获取 cache 加上参数后的路径 <ul><li>neomega 不会清除此路径下的文件<br> 但是，如果此路径下的文件被清除，相关程序应当能正常工作<br> 换句话说，应当检查 cache 下的文件是否存在，而不能假设它存在</li></ul></li><li>参数：任意数量 cache 后需要添加的路径 <blockquote><p>参数可以是想要加上的子目录或者文件路径<br> 这个通常是使用于网络的缓存 参数会直接加再代码文件路径后面</p></blockquote></li><li>返回值：返回 cache+ 参数的文件存储路径</li></ul></li></ul><div class="language-lua line-numbers-mode" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre><code><span class="line">  coromega<span class="token punctuation">:</span><span class="token function">cache_path_of</span><span class="token punctuation">(</span><span class="token string">&quot;test&quot;</span><span class="token punctuation">)</span> <span class="token comment">-- {$storage$}/cache/test</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="获取插件自身的名字" tabindex="-1"><a class="header-anchor" href="#获取插件自身的名字"><span>获取插件自身的名字</span></a></h2><ul><li>get_plugin_name()</li><li>范围：任意</li><li>说明：获取插件自身的名字</li><li>参数：无</li><li>返回值：插件自身的名字（不带后缀），返回一个字符串</li></ul><div class="language-lua line-numbers-mode" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre><code><span class="line">  <span class="token comment">-- 假设插件是 demo.lua</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">local</span> code_name <span class="token operator">=</span> coromega<span class="token punctuation">:</span><span class="token function">get_plugin_name</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token function">print</span><span class="token punctuation">(</span>code_name<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">-- 输出</span></span>
<span class="line">  <span class="token comment">-- demo</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="创建临时目录" tabindex="-1"><a class="header-anchor" href="#创建临时目录"><span>创建临时目录</span></a></h2><ul><li>make_temp_dir() <ul><li>范围：任意</li><li>说明：新建一个临时文件夹，并返回该文件夹的路径，每次 neomega 重启时都会移除该文件夹<div class="custom-container tip"><p class="custom-container-title">TIP</p><p>需要说明的一点是，该文件夹支持正常的读写和执行权限，而非类似安卓 Downloads 文件夹 (neomega 默认路径) 那样没有执行权限</p></div></li><li>返回值：临时文件夹的路径</li></ul></li></ul><div class="language-lua line-numbers-mode" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre><code><span class="line">  coromega<span class="token punctuation">:</span><span class="token function">make_temp_dir</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">-- 路径</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="路径拼接" tabindex="-1"><a class="header-anchor" href="#路径拼接"><span>路径拼接</span></a></h2><ul><li>path_join(...) <ul><li>范围：任意</li><li>说明：将参数拼接成新路径</li><li>参数：任意数量的路径字符串</li><li>返回值：返回拼接后的路径</li></ul></li></ul><div class="language-lua line-numbers-mode" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre><code><span class="line">  <span class="token keyword">local</span> path <span class="token operator">=</span> coromega<span class="token punctuation">:</span><span class="token function">path_join</span><span class="token punctuation">(</span><span class="token string">&quot;storage&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;test&quot;</span><span class="token punctuation">)</span> <span class="token comment">-- storage/test</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="目列出目录下所有文件-文件夹" tabindex="-1"><a class="header-anchor" href="#目列出目录下所有文件-文件夹"><span>目列出目录下所有文件/文件夹</span></a></h2><ul><li>path_list(path) <ul><li>范围：任意</li><li>说明：列出所有 path 路径下的文件或者目录</li><li>参数： <ul><li>path: 指定路径</li></ul></li><li>返回值：文件/目录</li></ul></li></ul><div class="language-lua line-numbers-mode" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre><code><span class="line">  <span class="token keyword">local</span> all_files <span class="token operator">=</span> coromega<span class="token punctuation">:</span><span class="token function">path_list</span><span class="token punctuation">(</span><span class="token string">&quot;storage&quot;</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token keyword">local</span> all_files <span class="token operator">=</span> coromega<span class="token punctuation">:</span><span class="token function">path_list</span><span class="token punctuation">(</span><span class="token string">&quot;path/to/dir&quot;</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token keyword">local</span> all_files <span class="token operator">=</span> coromega<span class="token punctuation">:</span><span class="token function">path_list</span><span class="token punctuation">(</span>coromega<span class="token punctuation">:</span><span class="token function">path_join</span><span class="token punctuation">(</span><span class="token string">&quot;storage&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;test&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="获取绝对路径" tabindex="-1"><a class="header-anchor" href="#获取绝对路径"><span>获取绝对路径</span></a></h2><ul><li>path_abs(path) <ul><li>范围：任意</li><li>说明：获取 path 文件/目录路径的绝对路径</li><li>参数： <ul><li>path: 需要获取的路径</li></ul></li><li>返回值：返回 path 路径的绝对路径</li></ul></li></ul><div class="language-lua line-numbers-mode" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre><code><span class="line">  <span class="token keyword">local</span> abs_path <span class="token operator">=</span> coromega<span class="token punctuation">:</span><span class="token function">path_abs</span><span class="token punctuation">(</span><span class="token string">&quot;storage&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="获取文件扩展名" tabindex="-1"><a class="header-anchor" href="#获取文件扩展名"><span>获取文件扩展名</span></a></h2><ul><li>path_ext(path) <ul><li>范围：任意</li><li>说明：获取 path 路径文件的扩展名</li><li>参数： <ul><li>path: 需要获取文件的路径</li></ul></li><li>返回值：返回 path 路径的扩展名</li></ul></li></ul><div class="language-lua line-numbers-mode" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre><code><span class="line">  <span class="token keyword">local</span> ext <span class="token operator">=</span> coromega<span class="token punctuation">:</span><span class="token function">path_ext</span><span class="token punctuation">(</span><span class="token string">&quot;test.lua&quot;</span><span class="token punctuation">)</span> <span class="token comment">-- .lua</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="移动文件" tabindex="-1"><a class="header-anchor" href="#移动文件"><span>移动文件</span></a></h2><ul><li>path_move(src, dst) <ul><li>范围：任意</li><li>说明：将 src 路径文件或者目录移动到 dst 路径，相当于剪切</li><li>参数： <ul><li>src: 需要移动的路径</li><li>dst: 移动后的路径</li></ul></li><li>返回值：无</li></ul></li></ul><div class="language-lua line-numbers-mode" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre><code><span class="line">  coromega<span class="token punctuation">:</span><span class="token function">path_move</span><span class="token punctuation">(</span><span class="token string">&quot;test&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;test2&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="删除文件-目录" tabindex="-1"><a class="header-anchor" href="#删除文件-目录"><span>删除文件/目录</span></a></h2><ul><li>path_remove(path) <ul><li>范围：任意</li><li>说明：删除 path 路径文件/目录</li><li>参数： <ul><li>path: 需要删除的文件路径/目录</li></ul></li><li>返回值：无</li></ul></li></ul><div class="language-lua line-numbers-mode" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre><code><span class="line">  coromega<span class="token punctuation">:</span><span class="token function">path_remove</span><span class="token punctuation">(</span><span class="token string">&quot;test&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="判断路径是否存在" tabindex="-1"><a class="header-anchor" href="#判断路径是否存在"><span>判断路径是否存在</span></a></h2><ul><li>path_exist(path) <ul><li>范围：任意</li><li>说明：判断 path 路径是否存在</li><li>参数： <ul><li>path: 需要判断的路径</li></ul></li><li>返回值：返回 path 路径是否存在</li></ul></li></ul><div class="language-lua line-numbers-mode" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre><code><span class="line">  <span class="token keyword">local</span> is_exist <span class="token operator">=</span> coromega<span class="token punctuation">:</span><span class="token function">path_exist</span><span class="token punctuation">(</span><span class="token string">&quot;test&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="字符串保存至文件" tabindex="-1"><a class="header-anchor" href="#字符串保存至文件"><span>字符串保存至文件</span></a></h2><ul><li>save_text(path, data) <ul><li>范围：任意</li><li>说明：将文本/字符串保存到 path 路径的文件中去</li><li>参数： <ul><li>path: 需要保存的文件路径</li><li>text: 需要保存的文本/字符串</li></ul></li><li>返回值：无</li></ul></li></ul><div class="language-lua line-numbers-mode" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre><code><span class="line">  coromega<span class="token punctuation">:</span><span class="token function">save_text</span><span class="token punctuation">(</span>coromega<span class="token punctuation">:</span><span class="token function">data_path_of</span><span class="token punctuation">(</span><span class="token string">&quot;test.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">&quot;Hello World!&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="读取文件字符串" tabindex="-1"><a class="header-anchor" href="#读取文件字符串"><span>读取文件字符串</span></a></h2><ul><li>load_text(path) <ul><li>范围：任意</li><li>说明：从 path 路径读取文本数据</li><li>参数： <ul><li>path: 需要读取的路径</li></ul></li><li>返回值：返回读取的数据</li></ul></li></ul><div class="language-lua line-numbers-mode" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre><code><span class="line">  <span class="token keyword">local</span> data <span class="token operator">=</span> coromega<span class="token punctuation">:</span><span class="token function">load_text</span><span class="token punctuation">(</span>coromega<span class="token punctuation">:</span><span class="token function">data_path_of</span><span class="token punctuation">(</span><span class="token string">&quot;test.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="数据保存至文件" tabindex="-1"><a class="header-anchor" href="#数据保存至文件"><span>数据保存至文件</span></a></h2><ul><li>save_data(path, data) <ul><li>范围：任意</li><li>说明：将 data 数据以 json 形式保存到 path 路径的文件中去</li><li>参数： <ul><li>path: 需要保存的文件路径</li><li>data: 需要保存的数据</li></ul></li><li>返回值：无</li></ul></li></ul><div class="language-lua line-numbers-mode" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre><code><span class="line">  coromega<span class="token punctuation">:</span><span class="token function">save_data</span><span class="token punctuation">(</span>coromega<span class="token punctuation">:</span><span class="token function">data_path_of</span><span class="token punctuation">(</span><span class="token string">&quot;test.json&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">&quot;Hello World!&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="读取文件数据" tabindex="-1"><a class="header-anchor" href="#读取文件数据"><span>读取文件数据</span></a></h2><ul><li>load_data(path) <ul><li>范围：任意</li><li>说明：从 path 路径读取 json 数据</li><li>参数： <ul><li>path: 需要读取的路径</li></ul></li><li>返回值：返回读取的数据</li></ul></li></ul><div class="language-lua line-numbers-mode" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre><code><span class="line">  <span class="token keyword">local</span> data <span class="token operator">=</span> coromega<span class="token punctuation">:</span><span class="token function">load_data</span><span class="token punctuation">(</span>coromega<span class="token punctuation">:</span><span class="token function">data_path_of</span><span class="token punctuation">(</span><span class="token string">&quot;test.json&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h1 id="数据库相关-api-database" tabindex="-1"><a class="header-anchor" href="#数据库相关-api-database"><span>数据库相关 api(database)</span></a></h1><blockquote><p>以下均为 db 对象的方法 这里需要特殊注意 neomega 使用的数据库是键值对数据库 也就是 key:value 的形式 key 和 value 都是字符串</p></blockquote><h2 id="打开或创建一个-键-值-数据库" tabindex="-1"><a class="header-anchor" href="#打开或创建一个-键-值-数据库"><span>打开或创建一个 键-值 数据库</span></a></h2><ul><li>key_value_db(path,db_type) <ul><li>范围：任意</li><li>说明：根据 path 路径的数据库文件创建一个 key_value_db 对象<br> 也就是 db 对象 如果不含有该文件 则自动创建 然后返回 db 对象 数据库类型可以为以下三种之一: <ol><li>&quot;&quot;,&quot;text_log&quot; 默认的实现<br> 折中的实现，不会因为意外关闭导致数据库完全损坏，而且也是以可读方式存在的<br> 手动修改数据库文件的时候需要先改log文件，log 文件内容必须遵循特定规则<br> 每次启动时都会把数据保存内存中，因此正式使用时只有少量数据时适合使用这个数据</li><li>&quot;level&quot;<br> leveldb, 显然是最好的实现，然而，内部数据都是以二进制存储，无法阅读<br> leveldb 的 file lock 被移除，因此需要用其他手段保证不会同时写一个文件<br> 适合在正式使用时使用</li><li>&quot;json&quot;<br> 最慢的最不安全的实现，每次启动时都会把数据保存内存中，当数据变更时更新 json 文件<br> 若在保存的时候程序被关闭，可能导致数据库完全损坏<br> 好处是内容便于阅读和修改，只建议在开发和调试时使用</li></ol></li><li>参数： <ul><li>path: 数据库的路径</li><li>db_type: 数据库类型: 应该为 &quot;&quot;,&quot;text_log&quot;,&quot;level&quot;,&quot;json&quot; 之一或空(等效于 &quot;text_log&quot;)</li></ul></li><li>返回值：返回一个 key_value_db 对象</li></ul></li></ul><div class="language-lua line-numbers-mode" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre><code><span class="line">  <span class="token keyword">local</span> textlog_db<span class="token operator">=</span>coromega<span class="token punctuation">:</span><span class="token function">key_value_db</span><span class="token punctuation">(</span><span class="token string">&quot;text_db&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;text_log&quot;</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token keyword">local</span> also_textlog_db<span class="token operator">=</span>coromega<span class="token punctuation">:</span><span class="token function">key_value_db</span><span class="token punctuation">(</span><span class="token string">&quot;text_db&quot;</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token keyword">local</span> json_db<span class="token operator">=</span>coromega<span class="token punctuation">:</span><span class="token function">key_value_db</span><span class="token punctuation">(</span><span class="token string">&quot;json_db&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;json&quot;</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token keyword">local</span> level_db<span class="token operator">=</span>coromega<span class="token punctuation">:</span><span class="token function">key_value_db</span><span class="token punctuation">(</span><span class="token string">&quot;level_db&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;level&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="获取数据对象" tabindex="-1"><a class="header-anchor" href="#获取数据对象"><span>获取数据对象</span></a></h2><ul><li>get(key) <ul><li>范围：任意</li><li>说明：获取 key 的值</li><li>参数：key 为你需要查询的键值对的索引值 (也就是键值)</li><li>返回值：返回 key 的值 如果没有可以通过~=&quot;&quot;或者 not value 来判断</li></ul></li></ul><div class="language-lua line-numbers-mode" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre><code><span class="line">  <span class="token keyword">local</span> value <span class="token operator">=</span> db<span class="token punctuation">:</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;test&quot;</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token keyword">not</span> value <span class="token keyword">then</span></span>
<span class="line">      coromega<span class="token punctuation">:</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;不存在该字符串&quot;</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token keyword">end</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="存储数据" tabindex="-1"><a class="header-anchor" href="#存储数据"><span>存储数据</span></a></h2><ul><li>set(key, value) <ul><li>范围：任意</li><li>说明：向数据库中存入一对数据</li><li>参数：key 为索引 value 为存入的值</li><li>返回值：无</li></ul></li></ul><div class="language-lua line-numbers-mode" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre><code><span class="line">  db<span class="token punctuation">:</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;test&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;Hello World!&quot;</span><span class="token punctuation">)</span></span>
<span class="line">  db<span class="token punctuation">:</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;age&quot;</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span></span>
<span class="line">  db<span class="token punctuation">:</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;author&quot;</span><span class="token punctuation">,</span><span class="token punctuation">{</span>name<span class="token operator">=</span><span class="token string">&quot;somebody&quot;</span><span class="token punctuation">,</span>age<span class="token operator">=</span><span class="token number">18</span><span class="token punctuation">,</span>keywords<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">&quot;machine_learning&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;computer_version&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;nlp&quot;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="删除数据" tabindex="-1"><a class="header-anchor" href="#删除数据"><span>删除数据</span></a></h2><ul><li>delete(key) <ul><li>范围：任意</li><li>说明：删除 key 索引对应的键值对<br> 其本质就是 coromega:set(key,nil) 也就是将 key 对应的 value 的值设为 nil(空)</li><li>参数： <ul><li>key: 需要删除的 key</li></ul></li><li>返回值：无</li></ul></li></ul><div class="language-lua line-numbers-mode" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre><code><span class="line">  db<span class="token punctuation">:</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token string">&quot;test&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="遍历数据库" tabindex="-1"><a class="header-anchor" href="#遍历数据库"><span>遍历数据库</span></a></h2><ul><li>iter(fn) <ul><li>范围：任意</li><li>说明：遍历数据库 为每一个键值对执行函数 fn</li><li>参数： <ul><li>fn: 遍历时的回调函数</li></ul></li><li>返回值：无</li></ul></li></ul><div class="language-lua line-numbers-mode" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre><code><span class="line">  db<span class="token punctuation">:</span><span class="token function">iter</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span></span>
<span class="line">      coromega<span class="token punctuation">:</span><span class="token function">print</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span></span>
<span class="line">      <span class="token keyword">local</span> next<span class="token operator">=</span><span class="token keyword">true</span></span>
<span class="line">      <span class="token keyword">return</span> next</span>
<span class="line">  <span class="token keyword">end</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="迁移数据库" tabindex="-1"><a class="header-anchor" href="#迁移数据库"><span>迁移数据库</span></a></h2><ul><li>migrate_to(new_db) <ul><li>范围：任意</li><li>说明：将现有数据库内容迁移到一个新的数据库中</li><li>参数： <ul><li>new_db: 新的数据库</li></ul></li><li>返回值：无</li></ul></li></ul><div class="language-lua line-numbers-mode" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre><code><span class="line">  <span class="token keyword">local</span> src_db<span class="token operator">=</span>coroemag<span class="token punctuation">:</span><span class="token function">key_value_db</span><span class="token punctuation">(</span><span class="token string">&quot;src&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;json&quot;</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token keyword">local</span> dst_db<span class="token operator">=</span>coromega<span class="token punctuation">:</span><span class="token function">key_value_db</span><span class="token punctuation">(</span><span class="token string">&quot;dst&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;level&quot;</span><span class="token punctuation">)</span></span>
<span class="line">  src_db<span class="token punctuation">:</span><span class="token function">migrate_to</span><span class="token punctuation">(</span>target_db<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="sql-数据库-sqlite" tabindex="-1"><a class="header-anchor" href="#sql-数据库-sqlite"><span>SQL 数据库 (sqlite)</span></a></h3><p>这部分的实现基本就是<br> https://github.com/vadv/gopher-lua-libs/tree/master/db<br> 的复制</p><p>但是因为此链接指向的实现因为 build flag 的原因，无法在 linux,macos,android 平台上工作，所以我们拷贝了这个实现并对其进行修改</p><p>你可以访问: https://github.com/vadv/gopher-lua-libs/tree/master/db 进一步了解 api 和实现细节，在这里我们仅仅给出一个示例代码</p><div class="language-lua line-numbers-mode" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre><code><span class="line"><span class="token keyword">local</span> omega <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;omega&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">local</span> json <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;json&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">--- @type Coromega</span></span>
<span class="line"><span class="token keyword">local</span> coromega <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;coromega&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>omega<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">local</span> config <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  shared <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">,</span> <span class="token comment">-- share connections between lua states</span></span>
<span class="line">  max_connections <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment">-- max connection (if you open shared connection with different max_connections - first win)</span></span>
<span class="line">  read_only <span class="token operator">=</span> <span class="token keyword">false</span><span class="token punctuation">,</span>   <span class="token comment">-- must execute read-write query</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">local</span> sqlite<span class="token punctuation">,</span> err <span class="token operator">=</span> omega<span class="token punctuation">.</span>sync_sql<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;sqlite3&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;file:test.db?cache=shared&amp;mode=memory&quot;</span><span class="token punctuation">,</span> config<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">if</span> err <span class="token keyword">then</span> <span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">end</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">local</span> result<span class="token punctuation">,</span> err <span class="token operator">=</span> sqlite<span class="token punctuation">:</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string">&quot;select 1&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">if</span> err <span class="token keyword">then</span> <span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">end</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token keyword">not</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>rows<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">then</span> <span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;sqlite error&quot;</span><span class="token punctuation">)</span> <span class="token keyword">end</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">local</span> _<span class="token punctuation">,</span> err <span class="token operator">=</span> sqlite<span class="token punctuation">:</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">&quot;CREATE TABLE t (id int, name string);&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">if</span> err <span class="token keyword">then</span> <span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">end</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">for</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span> <span class="token keyword">do</span></span>
<span class="line">    <span class="token keyword">local</span> query <span class="token operator">=</span> <span class="token string">&quot;INSERT INTO t VALUES (&quot;</span><span class="token operator">..</span>i<span class="token operator">..</span><span class="token string">&quot;, \\&quot;name-&quot;</span><span class="token operator">..</span>i<span class="token operator">..</span><span class="token string">&quot;\\&quot;);&quot;</span></span>
<span class="line">    <span class="token keyword">if</span> i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">then</span> query <span class="token operator">=</span> <span class="token string">&quot;INSERT INTO t VALUES (&quot;</span><span class="token operator">..</span>i<span class="token operator">..</span><span class="token string">&quot;, NULL);&quot;</span> <span class="token keyword">end</span></span>
<span class="line">    <span class="token keyword">local</span> _<span class="token punctuation">,</span> err <span class="token operator">=</span> sqlite<span class="token punctuation">:</span><span class="token function">exec</span><span class="token punctuation">(</span>query<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">if</span> err <span class="token keyword">then</span> <span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">end</span></span>
<span class="line"><span class="token keyword">end</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">local</span> result<span class="token punctuation">,</span> err <span class="token operator">=</span> sqlite<span class="token punctuation">:</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string">&quot;select * from t;&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">if</span> err <span class="token keyword">then</span> <span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">end</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">for</span> i<span class="token punctuation">,</span> v <span class="token keyword">in</span> <span class="token function">pairs</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>columns<span class="token punctuation">)</span> <span class="token keyword">do</span></span>
<span class="line">    <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">1</span> <span class="token keyword">then</span> <span class="token keyword">if</span> <span class="token keyword">not</span><span class="token punctuation">(</span>v <span class="token operator">==</span> <span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span> <span class="token keyword">then</span> <span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;error&quot;</span><span class="token punctuation">)</span> <span class="token keyword">end</span> <span class="token keyword">end</span></span>
<span class="line">    <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">2</span> <span class="token keyword">then</span> <span class="token keyword">if</span> <span class="token keyword">not</span><span class="token punctuation">(</span>v <span class="token operator">==</span> <span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span> <span class="token keyword">then</span> <span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;error&quot;</span><span class="token punctuation">)</span> <span class="token keyword">end</span> <span class="token keyword">end</span></span>
<span class="line"><span class="token keyword">end</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">for</span> _<span class="token punctuation">,</span> row <span class="token keyword">in</span> <span class="token function">pairs</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>rows<span class="token punctuation">)</span> <span class="token keyword">do</span></span>
<span class="line">    <span class="token keyword">for</span> id<span class="token punctuation">,</span> name <span class="token keyword">in</span> <span class="token function">pairs</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>columns<span class="token punctuation">)</span> <span class="token keyword">do</span></span>
<span class="line">        <span class="token function">print</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> row<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">end</span></span>
<span class="line"><span class="token keyword">end</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">local</span> _<span class="token punctuation">,</span> err <span class="token operator">=</span> sqlite<span class="token punctuation">:</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">&quot;CREATE TABLE t_stmt (id int, name string);&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">if</span> err <span class="token keyword">then</span> <span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">end</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">-- stmt exec</span></span>
<span class="line"><span class="token keyword">local</span> stmt<span class="token punctuation">,</span> err <span class="token operator">=</span> sqlite<span class="token punctuation">:</span><span class="token function">stmt</span><span class="token punctuation">(</span><span class="token string">&quot;insert into t_stmt (id, name) values (?, ?)&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">if</span> err <span class="token keyword">then</span> <span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">end</span></span>
<span class="line"><span class="token keyword">local</span> result<span class="token punctuation">,</span> err <span class="token operator">=</span> stmt<span class="token punctuation">:</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;name-1&#39;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">if</span> err <span class="token keyword">then</span> <span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">end</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token keyword">not</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>rows_affected <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">then</span> <span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;affted: &quot;</span><span class="token operator">..</span><span class="token function">tostring</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>rows_affected<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">end</span></span>
<span class="line"><span class="token keyword">local</span> err <span class="token operator">=</span> stmt<span class="token punctuation">:</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">if</span> err <span class="token keyword">then</span> <span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">end</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">-- stmt query</span></span>
<span class="line"><span class="token keyword">local</span> stmt<span class="token punctuation">,</span> err <span class="token operator">=</span> sqlite<span class="token punctuation">:</span><span class="token function">stmt</span><span class="token punctuation">(</span><span class="token string">&quot;select name from t_stmt where id = ?&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">if</span> err <span class="token keyword">then</span> <span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">end</span></span>
<span class="line"><span class="token keyword">local</span> result<span class="token punctuation">,</span> err <span class="token operator">=</span> stmt<span class="token punctuation">:</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">if</span> err <span class="token keyword">then</span> <span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">end</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token keyword">not</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>rows<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">&#39;name-1&#39;</span><span class="token punctuation">)</span> <span class="token keyword">then</span> <span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;must be &#39;name-1&#39;: &quot;</span><span class="token operator">..</span><span class="token function">tostring</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>rows<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">end</span></span>
<span class="line"><span class="token keyword">local</span> err <span class="token operator">=</span> stmt<span class="token punctuation">:</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">if</span> err <span class="token keyword">then</span> <span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">end</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">-- command (outside transaction)</span></span>
<span class="line"><span class="token keyword">local</span> _<span class="token punctuation">,</span> err <span class="token operator">=</span> sqlite<span class="token punctuation">:</span><span class="token function">command</span><span class="token punctuation">(</span><span class="token string">&quot;PRAGMA journal_mode = OFF;&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">if</span> err <span class="token keyword">then</span> <span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">end</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">local</span> err <span class="token operator">=</span> sqlite<span class="token punctuation">:</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">if</span> err <span class="token keyword">then</span> <span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">end</span></span>
<span class="line">coromega<span class="token punctuation">:</span><span class="token function">when_called_by_terminal_menu</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">    triggers <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">&quot;sql&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    argument_hint <span class="token operator">=</span> <span class="token string">&quot;[arg1] [arg2] ...&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    usage <span class="token operator">=</span> <span class="token string">&quot;sql&quot;</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token function">start_new</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span></span>
<span class="line">    coromega<span class="token punctuation">:</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;hello from sql!&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">end</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">coromega<span class="token punctuation">:</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,77),l=[p];function o(i,c){return a(),s("div",null,l)}const r=n(t,[["render",o],["__file","coromega_storage.html.vue"]]),d=JSON.parse('{"path":"/lua%E6%8F%92%E4%BB%B6%E7%BC%96%E5%86%99/%E5%AD%98%E5%82%A8%E7%9B%B8%E5%85%B3/coromega_storage.html","title":"路径、存储","lang":"zh-CN","frontmatter":{"lang":"zh-CN","title":"路径、存储","description":"存储示例"},"headers":[{"level":2,"title":"获取 config 文件 (插件) 路径","slug":"获取-config-文件-插件-路径","link":"#获取-config-文件-插件-路径","children":[]},{"level":2,"title":"获取代码文件 (插件) 路径","slug":"获取代码文件-插件-路径","link":"#获取代码文件-插件-路径","children":[]},{"level":2,"title":"获取 data 文件路径","slug":"获取-data-文件路径","link":"#获取-data-文件路径","children":[]},{"level":2,"title":"获取 cache 加上参数后的路径","slug":"获取-cache-加上参数后的路径","link":"#获取-cache-加上参数后的路径","children":[]},{"level":2,"title":"获取插件自身的名字","slug":"获取插件自身的名字","link":"#获取插件自身的名字","children":[]},{"level":2,"title":"创建临时目录","slug":"创建临时目录","link":"#创建临时目录","children":[]},{"level":2,"title":"路径拼接","slug":"路径拼接","link":"#路径拼接","children":[]},{"level":2,"title":"目列出目录下所有文件/文件夹","slug":"目列出目录下所有文件-文件夹","link":"#目列出目录下所有文件-文件夹","children":[]},{"level":2,"title":"获取绝对路径","slug":"获取绝对路径","link":"#获取绝对路径","children":[]},{"level":2,"title":"获取文件扩展名","slug":"获取文件扩展名","link":"#获取文件扩展名","children":[]},{"level":2,"title":"移动文件","slug":"移动文件","link":"#移动文件","children":[]},{"level":2,"title":"删除文件/目录","slug":"删除文件-目录","link":"#删除文件-目录","children":[]},{"level":2,"title":"判断路径是否存在","slug":"判断路径是否存在","link":"#判断路径是否存在","children":[]},{"level":2,"title":"字符串保存至文件","slug":"字符串保存至文件","link":"#字符串保存至文件","children":[]},{"level":2,"title":"读取文件字符串","slug":"读取文件字符串","link":"#读取文件字符串","children":[]},{"level":2,"title":"数据保存至文件","slug":"数据保存至文件","link":"#数据保存至文件","children":[]},{"level":2,"title":"读取文件数据","slug":"读取文件数据","link":"#读取文件数据","children":[]},{"level":2,"title":"打开或创建一个 键-值 数据库","slug":"打开或创建一个-键-值-数据库","link":"#打开或创建一个-键-值-数据库","children":[]},{"level":2,"title":"获取数据对象","slug":"获取数据对象","link":"#获取数据对象","children":[]},{"level":2,"title":"存储数据","slug":"存储数据","link":"#存储数据","children":[]},{"level":2,"title":"删除数据","slug":"删除数据","link":"#删除数据","children":[]},{"level":2,"title":"遍历数据库","slug":"遍历数据库","link":"#遍历数据库","children":[]},{"level":2,"title":"迁移数据库","slug":"迁移数据库","link":"#迁移数据库","children":[{"level":3,"title":"SQL 数据库 (sqlite)","slug":"sql-数据库-sqlite","link":"#sql-数据库-sqlite","children":[]}]}],"git":{"updatedTime":1727773696000,"contributors":[{"name":"RainyHallways","email":"78735995+RainyHallways@users.noreply.github.com","commits":1}]},"filePathRelative":"lua插件编写/存储相关/coromega_storage.md"}');export{r as comp,d as data};
