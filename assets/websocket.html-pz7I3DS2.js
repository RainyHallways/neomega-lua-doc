import{_ as n,c as s,o as a,a as e}from"./app-DJ6fbNhj.js";const p={},t=e(`<h1 id="websocket-相关-api" tabindex="-1"><a class="header-anchor" href="#websocket-相关-api"><span>Websocket 相关 API</span></a></h1><h2 id="连接到一个-websocket-服务器" tabindex="-1"><a class="header-anchor" href="#连接到一个-websocket-服务器"><span>连接到一个 websocket 服务器</span></a></h2><ul><li><p>connect_to_websocket(addr,optional_header)</p><ul><li>范围：协程内</li><li>参数： <ul><li>addr: 服务器地址，e.g. ws://127.0.0.1:1042, ws://127.0.0.1:1042/path/to/ws_api</li><li>optional_header: 可选的 http header, 可忽略</li></ul></li><li>返回值为一个 WebSocketConn 对象</li></ul><div class="language-lua line-numbers-mode" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre><code><span class="line"><span class="token comment">-- 不使用 header</span></span>
<span class="line">coromega<span class="token punctuation">:</span><span class="token function">start_new</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">local</span> conn <span class="token operator">=</span> coromega<span class="token punctuation">:</span><span class="token function">connect_to_websocket</span><span class="token punctuation">(</span><span class="token string">&quot;ws://127.0.0.1:1042&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">if</span> conn <span class="token operator">==</span> <span class="token keyword">nil</span> <span class="token keyword">then</span></span>
<span class="line">        coromega<span class="token punctuation">:</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;connect fail&quot;</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span></span>
<span class="line">    <span class="token keyword">end</span></span>
<span class="line">    conn<span class="token punctuation">:</span><span class="token function">when_new_msg</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">if</span> msg <span class="token operator">==</span> <span class="token keyword">nil</span> <span class="token keyword">then</span></span>
<span class="line">            <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;websocket connection closed!&quot;</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">else</span></span>
<span class="line">            <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;websocket client received (not intercepted): &quot;</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">end</span></span>
<span class="line">    <span class="token keyword">end</span><span class="token punctuation">)</span></span>
<span class="line">    conn<span class="token punctuation">:</span><span class="token function">send_message</span><span class="token punctuation">(</span><span class="token string">&quot;client hello&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">local</span> received <span class="token operator">=</span> conn<span class="token punctuation">:</span><span class="token function">receive_message</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">if</span> received <span class="token operator">==</span> <span class="token keyword">nil</span> <span class="token keyword">then</span></span>
<span class="line">        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;websocket connection closed!&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">else</span></span>
<span class="line">        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;websocket client received (first message): &quot;</span><span class="token punctuation">,</span> received<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">end</span></span>
<span class="line"><span class="token keyword">end</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">-- 使用 header</span></span>
<span class="line">coromega<span class="token punctuation">:</span><span class="token function">start_new</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">local</span> headers <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">        header1 <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&quot;c&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">-- 可以是多个 (2 会变成 &quot;2&quot;)</span></span>
<span class="line">        header2 <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">&quot;some headers&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">        header3 <span class="token operator">=</span> <span class="token string">&quot;header3,some values&quot;</span> <span class="token comment">-- 可以是单个 string</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">local</span> conn <span class="token operator">=</span> coromega<span class="token punctuation">:</span><span class="token function">connect_to_websocket</span><span class="token punctuation">(</span><span class="token string">&quot;ws://127.0.0.1:1042&quot;</span><span class="token punctuation">,</span>headers<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">end</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="创建一个-websocket-服务器" tabindex="-1"><a class="header-anchor" href="#创建一个-websocket-服务器"><span>创建一个 websocket 服务器</span></a></h2><ul><li>create_websocket_server(host,port) <ul><li>范围：任意</li><li>参数： <ul><li>host: 字符串，一般为 &quot;127.0.0.1&quot; (仅本机可访问) / &quot;0.0.0.0&quot; (可被其他主机访问)</li><li>port: 端口号，数字</li></ul></li><li>返回：监听器，监听器目前包含两个方法 <ul><li>when_new_conn: 当有客户端连接到服务器时，一个新协程被创建并启动指定的函数，函数的参数为 WebSocketConn 对象</li><li>when_dead: 当服务器关闭时，一个新协程被创建并启动指定的函数，函数的参数为字符串形式的服务器关闭的原因</li></ul></li></ul><div class="language-lua line-numbers-mode" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre><code><span class="line">coromega<span class="token punctuation">:</span><span class="token function">create_websocket_server</span><span class="token punctuation">(</span><span class="token string">&quot;0.0.0.0&quot;</span><span class="token punctuation">,</span> <span class="token number">1042</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token function">when_new_conn</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span></span>
<span class="line">    conn<span class="token punctuation">:</span><span class="token function">when_new_msg</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">if</span> msg <span class="token operator">==</span> <span class="token keyword">nil</span> <span class="token keyword">then</span></span>
<span class="line">            <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;websocket connection closed!&quot;</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">else</span></span>
<span class="line">            <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;websocket server received (not intercepted): &quot;</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">end</span></span>
<span class="line">        conn<span class="token punctuation">:</span><span class="token function">send_message</span><span class="token punctuation">(</span><span class="token string">&quot;server echo: &quot;</span> <span class="token operator">..</span> msg<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">end</span><span class="token punctuation">)</span></span>
<span class="line">    conn<span class="token punctuation">:</span><span class="token function">send_message</span><span class="token punctuation">(</span><span class="token string">&quot;server hello&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">local</span> received <span class="token operator">=</span> conn<span class="token punctuation">:</span><span class="token function">receive_message</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">if</span> received <span class="token operator">==</span> <span class="token keyword">nil</span> <span class="token keyword">then</span></span>
<span class="line">        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;websocket connection closed!&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">else</span></span>
<span class="line">        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;websocket server received (first message): &quot;</span><span class="token punctuation">,</span> received<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">end</span></span>
<span class="line"><span class="token keyword">end</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token function">when_dead</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>deadReason<span class="token punctuation">)</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;websocket server dead, reason: &quot;</span><span class="token punctuation">,</span> deadReason<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">end</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="websocketconn-对象的方法" tabindex="-1"><a class="header-anchor" href="#websocketconn-对象的方法"><span>WebSocketConn 对象的方法</span></a></h2><h3 id="发送消息-字符串" tabindex="-1"><a class="header-anchor" href="#发送消息-字符串"><span>发送消息 (字符串)</span></a></h3><ul><li>send_message(message) <ul><li>范围：协程内</li><li>参数： <ul><li>message: 待发送的字符串形式的数据，以 TextMessage 形式发送</li></ul></li><li>返回：是否有错误，无错误时为 nil</li></ul><div class="language-lua line-numbers-mode" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre><code><span class="line">err<span class="token operator">=</span>conn<span class="token punctuation">:</span><span class="token function">send_message</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul><h3 id="发送消息" tabindex="-1"><a class="header-anchor" href="#发送消息"><span>发送消息</span></a></h3><ul><li>send(message) <ul><li>范围：协程内</li><li>参数： <ul><li>message: 待发送的数据，以 TextMessage 形式发送其被 json.encode 后的结果</li></ul></li><li>返回：是否有错误，无错误时为 nil</li></ul><div class="language-lua line-numbers-mode" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre><code><span class="line">err<span class="token operator">=</span>conn<span class="token punctuation">:</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">{</span>author<span class="token operator">=</span><span class="token string">&quot;somebody&quot;</span><span class="token punctuation">,</span>age<span class="token operator">=</span><span class="token number">18</span><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul><h3 id="接收到消息时的回调" tabindex="-1"><a class="header-anchor" href="#接收到消息时的回调"><span>接收到消息时的回调</span></a></h3><ul><li><p>when_new_msg(func)</p><ul><li>范围：协程内</li><li>参数： <ul><li>func: 当新消息到来且未被 receive_message 拦截时，一个新协程被创建并启动 func 函数<br> 函数的参数为字符串形式的消息，如果连接断开，则获得 nil</li></ul></li><li>返回：无</li></ul><div class="language-lua line-numbers-mode" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre><code><span class="line">conn<span class="token punctuation">:</span><span class="token function">when_new_msg</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">if</span> msg <span class="token operator">==</span> <span class="token keyword">nil</span> <span class="token keyword">then</span></span>
<span class="line">        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;websocket connection closed!&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">else</span></span>
<span class="line">        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;websocket received (not intercepted): &quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">end</span></span>
<span class="line"><span class="token keyword">end</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="接收下一条消息" tabindex="-1"><a class="header-anchor" href="#接收下一条消息"><span>接收下一条消息</span></a></h3><ul><li><p>receive_message()</p><ul><li>范围：协程内</li><li>说明：接收下一条消息，下一条消息会做为该函数的返回值出现，而不会被 when_new_msg 处理</li><li>参数：无</li><li>返回：下一条即将被收到的消息，如果连接断开，则获得 nil</li></ul><div class="language-lua line-numbers-mode" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre><code><span class="line"><span class="token keyword">local</span> received <span class="token operator">=</span> conn<span class="token punctuation">:</span><span class="token function">receive_message</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">if</span> msg <span class="token operator">==</span> <span class="token keyword">nil</span> <span class="token keyword">then</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;websocket connection closed!&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">else</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;websocket received: &quot;</span><span class="token punctuation">,</span> received<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">end</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="综合使用" tabindex="-1"><a class="header-anchor" href="#综合使用"><span>综合使用</span></a></h2><div class="language-lua line-numbers-mode" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre><code><span class="line"><span class="token keyword">local</span> omega <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;omega&quot;</span><span class="token punctuation">)</span></span>
<span class="line">package<span class="token punctuation">.</span>path <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">&quot;%s;%s&quot;</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token function">format</span><span class="token punctuation">(</span></span>
<span class="line">    package<span class="token punctuation">.</span>path<span class="token punctuation">,</span></span>
<span class="line">    omega<span class="token punctuation">.</span>storage_path<span class="token punctuation">.</span><span class="token function">get_code_path</span><span class="token punctuation">(</span><span class="token string">&quot;LuaLoader&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;?.lua&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">local</span> coromega <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;coromega&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>omega<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">coromega<span class="token punctuation">:</span><span class="token function">create_websocket_server</span><span class="token punctuation">(</span><span class="token string">&quot;0.0.0.0&quot;</span><span class="token punctuation">,</span> <span class="token number">1042</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token function">when_new_conn</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span></span>
<span class="line">    conn<span class="token punctuation">:</span><span class="token function">when_new_msg</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span></span>
<span class="line">        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;websocket server received (not intercepted): &quot;</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span></span>
<span class="line">        conn<span class="token punctuation">:</span><span class="token function">send_message</span><span class="token punctuation">(</span><span class="token string">&quot;server echo: &quot;</span> <span class="token operator">..</span> msg<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">end</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    conn<span class="token punctuation">:</span><span class="token function">send_message</span><span class="token punctuation">(</span><span class="token string">&quot;server hello&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">local</span> received <span class="token operator">=</span> conn<span class="token punctuation">:</span><span class="token function">receive_message</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;websocket server received (first message): &quot;</span><span class="token punctuation">,</span> received<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">end</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token function">when_dead</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>deadReason<span class="token punctuation">)</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;websocket server dead, reason: &quot;</span><span class="token punctuation">,</span> deadReason<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">end</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">coromega<span class="token punctuation">:</span><span class="token function">start_new</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    coromega<span class="token punctuation">:</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1.0</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">local</span> conn <span class="token operator">=</span> coromega<span class="token punctuation">:</span><span class="token function">connect_to_websocket</span><span class="token punctuation">(</span><span class="token string">&quot;ws://127.0.0.1:1042&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">if</span> conn <span class="token operator">==</span> <span class="token keyword">nil</span> <span class="token keyword">then</span></span>
<span class="line">        coromega<span class="token punctuation">:</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;connect fail&quot;</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span></span>
<span class="line">    <span class="token keyword">end</span></span>
<span class="line">    conn<span class="token punctuation">:</span><span class="token function">when_new_msg</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span></span>
<span class="line">        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;websocket client received (not intercepted): &quot;</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">end</span><span class="token punctuation">)</span></span>
<span class="line">    conn<span class="token punctuation">:</span><span class="token function">send_message</span><span class="token punctuation">(</span><span class="token string">&quot;client hello&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">local</span> received <span class="token operator">=</span> conn<span class="token punctuation">:</span><span class="token function">receive_message</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;websocket client received (first message): &quot;</span><span class="token punctuation">,</span> received<span class="token punctuation">)</span></span>
<span class="line">    conn<span class="token punctuation">:</span><span class="token function">send_message</span><span class="token punctuation">(</span><span class="token string">&quot;client hello 1&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    coromega<span class="token punctuation">:</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1.0</span><span class="token punctuation">)</span></span>
<span class="line">    conn<span class="token punctuation">:</span><span class="token function">send_message</span><span class="token punctuation">(</span><span class="token string">&quot;client hello 2&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    coromega<span class="token punctuation">:</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1.0</span><span class="token punctuation">)</span></span>
<span class="line">    conn<span class="token punctuation">:</span><span class="token function">send_message</span><span class="token punctuation">(</span><span class="token string">&quot;client hello 3&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">local</span> received <span class="token operator">=</span> conn<span class="token punctuation">:</span><span class="token function">receive_message</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;websocket client received: &quot;</span><span class="token punctuation">,</span> received<span class="token punctuation">)</span></span>
<span class="line">    coromega<span class="token punctuation">:</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1.0</span><span class="token punctuation">)</span></span>
<span class="line">    conn<span class="token punctuation">:</span><span class="token function">send_message</span><span class="token punctuation">(</span><span class="token string">&quot;client hello 4&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">local</span> received <span class="token operator">=</span> conn<span class="token punctuation">:</span><span class="token function">receive_message</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;websocket client received: &quot;</span><span class="token punctuation">,</span> received<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">end</span><span class="token punctuation">)</span></span>
<span class="line">coromega<span class="token punctuation">:</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,16),c=[t];function o(l,i){return a(),s("div",null,c)}const k=n(p,[["render",o],["__file","websocket.html.vue"]]),r=JSON.parse('{"path":"/lua%E6%8F%92%E4%BB%B6%E7%BC%96%E5%86%99/websocket/websocket.html","title":"Websocket","lang":"zh-CN","frontmatter":{"lang":"zh-CN","title":"Websocket","description":"Websocket 示例"},"headers":[{"level":2,"title":"连接到一个 websocket 服务器","slug":"连接到一个-websocket-服务器","link":"#连接到一个-websocket-服务器","children":[]},{"level":2,"title":"创建一个 websocket 服务器","slug":"创建一个-websocket-服务器","link":"#创建一个-websocket-服务器","children":[]},{"level":2,"title":"WebSocketConn 对象的方法","slug":"websocketconn-对象的方法","link":"#websocketconn-对象的方法","children":[{"level":3,"title":"发送消息 (字符串)","slug":"发送消息-字符串","link":"#发送消息-字符串","children":[]},{"level":3,"title":"发送消息","slug":"发送消息","link":"#发送消息","children":[]},{"level":3,"title":"接收到消息时的回调","slug":"接收到消息时的回调","link":"#接收到消息时的回调","children":[]},{"level":3,"title":"接收下一条消息","slug":"接收下一条消息","link":"#接收下一条消息","children":[]}]},{"level":2,"title":"综合使用","slug":"综合使用","link":"#综合使用","children":[]}],"git":{"updatedTime":1727773696000,"contributors":[{"name":"RainyHallways","email":"78735995+RainyHallways@users.noreply.github.com","commits":1}]},"filePathRelative":"lua插件编写/websocket/websocket.md"}');export{k as comp,r as data};
